using ConfluenceToNotionConverter.Models;
using HtmlAgilityPack;
using System.IO.Compression;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;

namespace ConfluenceToNotionConverter
{
    internal static class XmlArchiveConverter
	{
		public static bool IsAllowedExtension(string fileName)
		{
			var extension = Path.GetExtension(fileName).ToLowerInvariant();

			switch (extension)
			{
				case ".bmp":
				case ".gif":
				case ".jpeg":
				case ".jpg":
				case ".png":
				case ".tiff":
				case ".tif":
				case ".webp":
					//case ".pdf":
					//case ".ai":
					//case ".svg":
					return true;
				default:
					return false;
			}
		}

		public static void ConvertXmlArchiveToHtmlArchive(string zipFilePath, string sourceDomain, string outputPath, bool verbose)
		{
			if (!File.Exists(zipFilePath))
				throw new FileNotFoundException("Cannot open the zip file.", zipFilePath);

			if (File.Exists(outputPath))
				throw new ArgumentException($"There is already a file with output path. ({outputPath})", nameof(outputPath));

			using var zipFileStream = File.OpenRead(zipFilePath);
			var sourceZip = new ZipArchive(zipFileStream, ZipArchiveMode.Read);
			var entitiesXmlEntity = sourceZip.GetEntry("entities.xml");

			if (entitiesXmlEntity == null)
				throw new InvalidOperationException("Cannot find entities.xml file in the archive.");

			var xmlDoc = new XmlDocument();
			xmlDoc.Load(entitiesXmlEntity.Open());

			var contentProps = ConfluenceDataExtractor.ExtractContentProperties(xmlDoc);
			var pages = ConfluenceDataExtractor.ExtractPageStructure(xmlDoc, contentProps);
			var attachments = ConfluenceDataExtractor.ExtractAttachments(xmlDoc, pages, sourceZip);
			var bodyContents = ConfluenceDataExtractor.ExtractBodyContents(xmlDoc, attachments, pages);
			pages = ConfluenceDataExtractor.FillPageContents(pages, contentProps, attachments, bodyContents);

			var workingPath = Path.Combine(Path.GetTempPath(), $"temp_{Guid.NewGuid().ToString("n")}");
			var props = ConfluenceDataExtractor.ExtractProperties(sourceZip);

			if (props == null)
				return;

			var spaceKey = props.Where(x => string.Equals(x.Key, "spaceKey", StringComparison.Ordinal)).Select(x => x.Value).FirstOrDefault();

			if (string.IsNullOrWhiteSpace(spaceKey))
				return;

			if (!Directory.Exists(workingPath))
				Directory.CreateDirectory(workingPath);

			var spaceDirectory = Path.Combine(workingPath, spaceKey);

			if (!Directory.Exists(spaceDirectory))
				Directory.CreateDirectory(spaceDirectory);

			var indexHtmlFile = Path.Combine(spaceDirectory, "index.html");
			File.WriteAllText(indexHtmlFile, GenerateTocHtml(pages, spaceKey), new UTF8Encoding(false));

			var stylesDirectory = Path.Combine(spaceDirectory, "styles");

			if (!Directory.Exists(stylesDirectory))
				Directory.CreateDirectory(stylesDirectory);

			var siteCssFile = Path.Combine(stylesDirectory, "site.css");
			var siteCssContents = Convert.FromBase64String(@"CgpAaW1wb3J0ICcuL2ltcG9ydHMvZ2xvYmFsJzsKCi8qKgogKiBSRVNFVAogKi8KaHRtbCwgYm9keSwgcCwgZGl2LCBoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBpbWcsIHByZSwgZm9ybSwgZmllbGRzZXQgewogICAgbWFyZ2luOiAwOwogICAgcGFkZGluZzogMDsKfQp1bCwgb2wsIGRsIHsKICAgIG1hcmdpbjogMDsKfQppbWcsIGZpZWxkc2V0IHsKICAgIGJvcmRlcjogMDsKfQpALW1vei1kb2N1bWVudCB1cmwtcHJlZml4KCkgewogICAgaW1nIHsKICAgICAgICBmb250LXNpemU6IDA7CiAgICB9CiAgICBpbWc6LW1vei1icm9rZW4gewogICAgICAgIGZvbnQtc2l6ZTogaW5oZXJpdDsKICAgIH0KfQoKLyogaHR0cHM6Ly9naXRodWIuY29tL25lY29sYXMvbm9ybWFsaXplLmNzcyAqLwovKiBDdXN0b21pc2VkIHRvIHJlbW92ZSBzdHlsZXMgZm9yIHVuc3VwcG9ydGVkIGJyb3dzZXJzICovCi8vIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnMKLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLy8gQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgZm9yIGBkZXRhaWxzYCBvciBgc3VtbWFyeWAgaW4gSUUgOS8xMC8xMSBhbmQgRmlyZWZveC4KLy8gQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgZm9yIGBtYWluYCBpbiBJRSA5LzEwLzExLgpkZXRhaWxzLAptYWluLApzdW1tYXJ5IHsKICAgIGRpc3BsYXk6IGJsb2NrOwp9CgovLyAxLiBDb3JyZWN0IGBpbmxpbmUtYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgaW4gSUUgOS4KLy8gMi4gTm9ybWFsaXplIHZlcnRpY2FsIGFsaWdubWVudCBvZiBgcHJvZ3Jlc3NgIGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLgphdWRpbywKY2FudmFzLApwcm9ncmVzcywKdmlkZW8gewogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAvLyAxCiAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IC8vIDIKfQoKLy8gUHJldmVudCBtb2Rlcm4gYnJvd3NlcnMgZnJvbSBkaXNwbGF5aW5nIGBhdWRpb2Agd2l0aG91dCBjb250cm9scy4KLy8gUmVtb3ZlIGV4Y2VzcyBoZWlnaHQgaW4gaU9TIDUgZGV2aWNlcy4KYXVkaW86bm90KFtjb250cm9sc10pIHsKICAgIGRpc3BsYXk6IG5vbmU7CiAgICBoZWlnaHQ6IDA7Cn0KCi8vIEFkZHJlc3MgYFtoaWRkZW5dYCBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS8xMC4KLy8gSGlkZSB0aGUgYHRlbXBsYXRlYCBlbGVtZW50IGluIElFIDgvOS8xMSwgU2FmYXJpLCBhbmQgRmlyZWZveCA8IDIyLgpbaGlkZGVuXSwKdGVtcGxhdGUgewogICAgZGlzcGxheTogbm9uZTsKfQoKLy8gUHJldmVudCBpT1MgZGVmYXVsdGluZyB0byBwdXNoLWJ1dHRvbiB3aGljaCBpZ25vcmVzIG1hbnkgc3R5bGVzIHVubGVzcyBhIGJnIGltYWdlIGlzIHNldAppbnB1dFt0eXBlPSJidXR0b24iXSwKaW5wdXRbdHlwZT0ic3VibWl0Il0sCmlucHV0W3R5cGU9InJlc2V0Il0gewogICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247Cn0KCgpAaW1wb3J0ICcuL2ltcG9ydHMvZ2xvYmFsJzsKCi8qKgogKiBUWVBPR1JBUEhZIC0gMTRweCBiYXNlIGZvbnQgc2l6ZSwgYWdub3N0aWMgZm9udCBzdGFjawogKi8KYm9keSB7CiAgICBjb2xvcjogQGF1aS10ZXh0LWNvbG9yOwogICAgZm9udC1mYW1pbHk6IEBhdWktZm9udC1mYW1pbHk7CiAgICBmb250LXNpemU6IEBhdWktZm9udC1zaXplLW1lZGl1bTsKICAgIGxpbmUtaGVpZ2h0OiAxLjQyODU3MTQyODU3MTQzOwp9CgovKiBJbnRlcm5hdGlvbmFsIEZvbnQgU3RhY2tzKi8KW2xhbmd8PWVuXSB7CiAgICBmb250LWZhbWlseTogQGF1aS1mb250LWZhbWlseTsKfQoKW2xhbmd8PWphXSB7CiAgICBmb250LWZhbWlseTogQGF1aS1mb250LWZhbWlseS1qYTsKfQoKLyogRGVmYXVsdCBtYXJnaW5zICovCnAsCnVsLApvbCwKZGwsCmgxLApoMiwKaDMsCmg0LApoNSwKaDYsCmJsb2NrcXVvdGUsCnByZSwKZm9ybS5hdWksCnRhYmxlLmF1aSwKLmF1aS10YWJzLAouYXVpLXBhbmVsLAouYXVpLWdyb3VwIHsKICAgIG1hcmdpbjogQGF1aS1ncmlkIDAgMCAwOwp9CgovKiBObyB0b3AgbWFyZ2luIHRvIGludGVyZmVyZSB3aXRoIGJveCBwYWRkaW5nICovCnA6Zmlyc3QtY2hpbGQsCnVsOmZpcnN0LWNoaWxkLApvbDpmaXJzdC1jaGlsZCwKZGw6Zmlyc3QtY2hpbGQsCmgxOmZpcnN0LWNoaWxkLApoMjpmaXJzdC1jaGlsZCwKaDM6Zmlyc3QtY2hpbGQsCmg0OmZpcnN0LWNoaWxkLApoNTpmaXJzdC1jaGlsZCwKaDY6Zmlyc3QtY2hpbGQsCmJsb2NrcXVvdGU6Zmlyc3QtY2hpbGQsCnByZTpmaXJzdC1jaGlsZCwKZm9ybS5hdWk6Zmlyc3QtY2hpbGQsCnRhYmxlLmF1aTpmaXJzdC1jaGlsZCwKLmF1aS10YWJzOmZpcnN0LWNoaWxkLAouYXVpLXBhbmVsOmZpcnN0LWNoaWxkLAouYXVpLWdyb3VwOmZpcnN0LWNoaWxkIHsKICAgIG1hcmdpbi10b3A6IDA7Cn0KCi8qIEhlYWRpbmdzOiBkZXNpcmVkIGxpbmUgaGVpZ2h0IGluIHB4IC8gZm9udCBzaXplID0gdW5pdGxlc3MgbGluZSBoZWlnaHQgKi8KaDEsCi5hdWktcGFnZS1oZWFkZXItaGVybyAuYXVpLXBhZ2UtaGVhZGVyLW1haW4gaDEsIC8qIC5hdWktcGFnZS1oZWFkZXItaGVybyBhbmQgLmF1aS1wYWdlLWhlYWRlci1tYXJrZXRpbmcgaGF2ZSBiZWVuIERFUFJFQ0FURUQgaW4gNS43ICovCi5hdWktcGFnZS1oZWFkZXItaGVybyAuYXVpLXBhZ2UtaGVhZGVyLW1haW4gaDIsCi5hdWktcGFnZS1oZWFkZXItbWFya2V0aW5nIC5hdWktcGFnZS1oZWFkZXItbWFpbiBoMSwKLmF1aS1wYWdlLWhlYWRlci1tYXJrZXRpbmcgLmF1aS1wYWdlLWhlYWRlci1tYWluIGgyIHsKICAgIGNvbG9yOiBAYXVpLWhlYWRpbmcteHhsYXJnZS10ZXh0LWNvbG9yOwogICAgZm9udC1zaXplOiBAYXVpLWhlYWRpbmcteHhsYXJnZS1mb250LXNpemU7CiAgICBmb250LXdlaWdodDogQGF1aS1oZWFkaW5nLXh4bGFyZ2UtZm9udC13ZWlnaHQ7CiAgICBsaW5lLWhlaWdodDogQGF1aS1oZWFkaW5nLXh4bGFyZ2UtbGluZS1oZWlnaHQ7CiAgICB0ZXh0LXRyYW5zZm9ybTogQGF1aS1oZWFkaW5nLXh4bGFyZ2UtdGV4dC10cmFuc2Zvcm07CiAgICBtYXJnaW46IEBhdWktaGVhZGluZy14eGxhcmdlLW1hcmdpbi10b3AgMCAwIDA7Cn0KaDIgewogICAgY29sb3I6IEBhdWktaGVhZGluZy14bGFyZ2UtdGV4dC1jb2xvcjsKICAgIGZvbnQtc2l6ZTogQGF1aS1oZWFkaW5nLXhsYXJnZS1mb250LXNpemU7CiAgICBmb250LXdlaWdodDogQGF1aS1oZWFkaW5nLXhsYXJnZS1mb250LXdlaWdodDsKICAgIGxpbmUtaGVpZ2h0OiBAYXVpLWhlYWRpbmcteGxhcmdlLWxpbmUtaGVpZ2h0OwogICAgdGV4dC10cmFuc2Zvcm06IEBhdWktaGVhZGluZy14bGFyZ2UtdGV4dC10cmFuc2Zvcm07CiAgICBtYXJnaW46IEBhdWktaGVhZGluZy14bGFyZ2UtbWFyZ2luLXRvcCAwIDAgMDsKfQpoMywKLmF1aS1wYWdlLWhlYWRlci1oZXJvIC5hdWktcGFnZS1oZWFkZXItbWFpbiBwLCAvKiAuYXVpLXBhZ2UtaGVhZGVyLWhlcm8gYW5kIC5hdWktcGFnZS1oZWFkZXItbWFya2V0aW5nIGhhdmUgYmVlbiBERVBSRUNBVEVEIGluIDUuNyAqLwouYXVpLXBhZ2UtaGVhZGVyLW1hcmtldGluZyAuYXVpLXBhZ2UtaGVhZGVyLW1haW4gcCB7CiAgICBjb2xvcjogQGF1aS1oZWFkaW5nLWxhcmdlLXRleHQtY29sb3I7CiAgICBmb250LXNpemU6IEBhdWktaGVhZGluZy1sYXJnZS1mb250LXNpemU7CiAgICBmb250LXdlaWdodDogQGF1aS1oZWFkaW5nLWxhcmdlLWZvbnQtd2VpZ2h0OwogICAgbGluZS1oZWlnaHQ6IEBhdWktaGVhZGluZy1sYXJnZS1saW5lLWhlaWdodDsKICAgIHRleHQtdHJhbnNmb3JtOiBAYXVpLWhlYWRpbmctbGFyZ2UtdGV4dC10cmFuc2Zvcm07CiAgICBtYXJnaW46IEBhdWktaGVhZGluZy1sYXJnZS1tYXJnaW4tdG9wIDAgMCAwOwp9Cmg0IHsKICAgIGNvbG9yOiBAYXVpLWhlYWRpbmctbWVkaXVtLXRleHQtY29sb3I7CiAgICBmb250LXNpemU6IEBhdWktaGVhZGluZy1tZWRpdW0tZm9udC1zaXplOwogICAgZm9udC13ZWlnaHQ6IEBhdWktaGVhZGluZy1tZWRpdW0tZm9udC13ZWlnaHQ7CiAgICBsaW5lLWhlaWdodDogQGF1aS1oZWFkaW5nLW1lZGl1bS1saW5lLWhlaWdodDsKICAgIHRleHQtdHJhbnNmb3JtOiBAYXVpLWhlYWRpbmctbWVkaXVtLXRleHQtdHJhbnNmb3JtOwogICAgbWFyZ2luOiBAYXVpLWhlYWRpbmctbWVkaXVtLW1hcmdpbi10b3AgMCAwIDA7Cn0KaDUgewogICAgY29sb3I6IEBhdWktaGVhZGluZy1zbWFsbC10ZXh0LWNvbG9yOwogICAgZm9udC1zaXplOiBAYXVpLWhlYWRpbmctc21hbGwtZm9udC1zaXplOwogICAgZm9udC13ZWlnaHQ6IEBhdWktaGVhZGluZy1zbWFsbC1mb250LXdlaWdodDsKICAgIGxpbmUtaGVpZ2h0OiBAYXVpLWhlYWRpbmctc21hbGwtbGluZS1oZWlnaHQ7CiAgICB0ZXh0LXRyYW5zZm9ybTogQGF1aS1oZWFkaW5nLXNtYWxsLXRleHQtdHJhbnNmb3JtOwogICAgbWFyZ2luOiBAYXVpLWhlYWRpbmctc21hbGwtbWFyZ2luLXRvcCAwIDAgMDsKfQpoNiB7CiAgICBjb2xvcjogQGF1aS1oZWFkaW5nLXhzbWFsbC10ZXh0LWNvbG9yOwogICAgZm9udC1zaXplOiBAYXVpLWhlYWRpbmcteHNtYWxsLWZvbnQtc2l6ZTsKICAgIGZvbnQtd2VpZ2h0OiBAYXVpLWhlYWRpbmcteHNtYWxsLWZvbnQtd2VpZ2h0OwogICAgbGluZS1oZWlnaHQ6IEBhdWktaGVhZGluZy14c21hbGwtbGluZS1oZWlnaHQ7CiAgICB0ZXh0LXRyYW5zZm9ybTogQGF1aS1oZWFkaW5nLXhzbWFsbC10ZXh0LXRyYW5zZm9ybTsKICAgIG1hcmdpbjogQGF1aS1oZWFkaW5nLXhzbWFsbC1tYXJnaW4tdG9wIDAgMCAwOwp9CmgxOmZpcnN0LWNoaWxkLApoMjpmaXJzdC1jaGlsZCwKaDM6Zmlyc3QtY2hpbGQsCmg0OmZpcnN0LWNoaWxkLApoNTpmaXJzdC1jaGlsZCwKaDY6Zmlyc3QtY2hpbGQgewogICAgbWFyZ2luLXRvcDogMDsKfQovKiBOaWNlIHN0eWxlcyBmb3IgdXNpbmcgc3ViaGVhZGluZ3MgKi8KaDEgKyBoMiwKaDIgKyBoMywKaDMgKyBoNCwKaDQgKyBoNSwKaDUgKyBoNiB7CiAgICBtYXJnaW4tdG9wOiBAYXVpLWdyaWQ7Cn0KLyogSW5jcmVhc2UgdGhlIG1hcmdpbnMgb24gYWxsIGhlYWRpbmdzIHdoZW4gdXNlZCBpbiB0aGUgZ3JvdXAvaXRlbSBwYXR0ZXJuIC4uLiAqLwouYXVpLWdyb3VwID4gLmF1aS1pdGVtID4gaDE6Zmlyc3QtY2hpbGQsCi5hdWktZ3JvdXAgPiAuYXVpLWl0ZW0gPiBoMjpmaXJzdC1jaGlsZCwKLmF1aS1ncm91cCA+IC5hdWktaXRlbSA+IGgzOmZpcnN0LWNoaWxkLAouYXVpLWdyb3VwID4gLmF1aS1pdGVtID4gaDQ6Zmlyc3QtY2hpbGQsCi5hdWktZ3JvdXAgPiAuYXVpLWl0ZW0gPiBoNTpmaXJzdC1jaGlsZCwKLmF1aS1ncm91cCA+IC5hdWktaXRlbSA+IGg2OmZpcnN0LWNoaWxkIHsKICAgIG1hcmdpbi10b3A6IChAYXVpLWdyaWQgKiAyKTsKfQovKiAuLi4gdW5sZXNzIHRoZXkncmUgdGhlIGZpcnN0LWNoaWxkICovCi5hdWktZ3JvdXA6Zmlyc3QtY2hpbGQgPiAuYXVpLWl0ZW0gPiBoMTpmaXJzdC1jaGlsZCwKLmF1aS1ncm91cDpmaXJzdC1jaGlsZCA+IC5hdWktaXRlbSA+IGgyOmZpcnN0LWNoaWxkLAouYXVpLWdyb3VwOmZpcnN0LWNoaWxkID4gLmF1aS1pdGVtID4gaDM6Zmlyc3QtY2hpbGQsCi5hdWktZ3JvdXA6Zmlyc3QtY2hpbGQgPiAuYXVpLWl0ZW0gPiBoNDpmaXJzdC1jaGlsZCwKLmF1aS1ncm91cDpmaXJzdC1jaGlsZCA+IC5hdWktaXRlbSA+IGg1OmZpcnN0LWNoaWxkLAouYXVpLWdyb3VwOmZpcnN0LWNoaWxkID4gLmF1aS1pdGVtID4gaDY6Zmlyc3QtY2hpbGQgewogICAgbWFyZ2luLXRvcDogMDsKfQoKLyogT3RoZXIgdHlwb2dyYXBoaWNhbCBlbGVtZW50cyAqLwpzbWFsbCB7CiAgICBjb2xvcjogQGF1aS1zbWFsbC10ZXh0LWNvbG9yOwogICAgZm9udC1zaXplOiBAYXVpLWZvbnQtc2l6ZS1zbWFsbDsKICAgIGxpbmUtaGVpZ2h0OiAxLjMzMzMzMzMzMzMzMzMzOwp9CmNvZGUsCmtiZCB7CiAgICBmb250LWZhbWlseTogbW9ub3NwYWNlOwp9CnZhciwKYWRkcmVzcywKZGZuLApjaXRlIHsKICAgIGZvbnQtc3R5bGU6IGl0YWxpYzsKfQpjaXRlOmJlZm9yZSB7CiAgICBjb250ZW50OiAiXDIwMTQgXDIwMDkiOwp9CmJsb2NrcXVvdGUgewogICAgYm9yZGVyLWxlZnQ6IEBhdWktYm9yZGVyLXdpZHRoIEBhdWktYm9yZGVyLXN0eWxlIEBhdWktYm9yZGVyLWNvbG9yOwogICAgY29sb3I6IEBhdWktYmxvY2txdW90ZS10ZXh0LWNvbG9yOwogICAgbWFyZ2luLWxlZnQ6IChAYXVpLWdyaWQgKiAyIC0gMSk7CiAgICBwYWRkaW5nOiBAYXVpLWdyaWQgKEBhdWktZ3JpZCAqIDIpOwp9CmJsb2NrcXVvdGUgPiBjaXRlIHsKICAgIGRpc3BsYXk6IGJsb2NrOwogICAgbWFyZ2luLXRvcDogQGF1aS1ncmlkOwp9CnEgewogICAgY29sb3I6IEBhdWktcXVvdGUtdGV4dC1jb2xvcjsKfQpxOmJlZm9yZSB7CiAgICBjb250ZW50OiBvcGVuLXF1b3RlOwp9CnE6YWZ0ZXIgewogICAgY29udGVudDogY2xvc2UtcXVvdGU7Cn0KYWJiciB7CiAgICBib3JkZXItYm90dG9tOiAxcHggQGF1aS1hYmJyLWJvcmRlci1jb2xvciBkb3R0ZWQ7CiAgICBjdXJzb3I6IGhlbHA7Cn0KCgpAaW1wb3J0ICcuL2ltcG9ydHMvZ2xvYmFsJzsKCi8qKgogKiBQQUdFIExBWU9VVAogKi8KLmF1aS1oZWFkZXIsCiNmb290ZXIgewogICAgY2xlYXI6IGJvdGg7CiAgICBmbG9hdDogbGVmdDsKICAgIHdpZHRoOiAxMDAlOwp9CgojY29udGVudCB7CiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgY2xlYXI6IGJvdGg7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KCiNjb250ZW50OmJlZm9yZSB7CiAgICBjb250ZW50OiAiIjsKICAgIGNsZWFyOiBib3RoOwogICAgZGlzcGxheTogdGFibGU7Cn0KCiNmb290ZXIgLmZvb3Rlci1ib2R5IGEgewogICAgY29sb3I6IEBhdWktZm9vdGVyLWJvZHktbGluay10ZXh0LWNvbG9yOwp9CgojZm9vdGVyIC5mb290ZXItYm9keSA+IHVsLAojZm9vdGVyIC5mb290ZXItYm9keSA+IHAgewogICAgbWFyZ2luOiBAYXVpLWdyaWQgMCAwIDA7Cn0KCiNmb290ZXIgLmZvb3Rlci1ib2R5ID4gdWw6Zmlyc3QtY2hpbGQsCiNmb290ZXIgLmZvb3Rlci1ib2R5ID4gcDpmaXJzdC1jaGlsZCB7CiAgICBtYXJnaW46IDA7Cn0KCiNmb290ZXIgLmZvb3Rlci1ib2R5ID4gdWwgewogICAgZGlzcGxheTogYmxvY2s7CiAgICBmb250LXNpemU6IDA7CiAgICBsaXN0LXN0eWxlOiBub25lOwogICAgcGFkZGluZzogMDsKfQoKI2Zvb3RlciAuZm9vdGVyLWJvZHkgPiB1bCA+IGxpIHsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgIGZvbnQtc2l6ZTogQGF1aS1mb250LXNpemUtc21hbGw7CiAgICBsaW5lLWhlaWdodDogMS42NjY2NjY2NjY2NjY2NzsKICAgIHBhZGRpbmc6IDA7CiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOwp9CgojZm9vdGVyIC5mb290ZXItYm9keSA+IHVsID4gbGkgKyBsaSB7CiAgICBtYXJnaW4tbGVmdDogQGF1aS1ncmlkOwp9CgojZm9vdGVyIC5mb290ZXItYm9keSA+IHVsID4gbGk6YWZ0ZXIgewogICAgY29udGVudDogIlxiNyI7IC8qIG1pZCBkb3QgKi8KICAgIG1hcmdpbi1sZWZ0OiBAYXVpLWdyaWQ7CiAgICBzcGVhazogbm9uZTsKfQojZm9vdGVyIC5mb290ZXItYm9keSA+IHVsID4gbGk6bGFzdC1jaGlsZDphZnRlciB7CiAgICBkaXNwbGF5OiBub25lOwp9CgoKLyoqCiAqIEdST1VQL0lURU0KICovCgouYXVpLWdyb3VwIHsKICAgIGRpc3BsYXk6IHRhYmxlOwogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgIGJvcmRlci1zcGFjaW5nOiAwOwogICAgdGFibGUtbGF5b3V0OiBmaXhlZDsKICAgIHdpZHRoOiAxMDAlOwp9CgouYXVpLWdyb3VwID4gLmF1aS1pdGVtIHsKICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICBkaXNwbGF5OiB0YWJsZS1jZWxsOwogICAgbWFyZ2luOiAwOwogICAgdmVydGljYWwtYWxpZ246IHRvcDsKfQoKLmF1aS1ncm91cCA+IC5hdWktaXRlbSArIC5hdWktaXRlbSB7CiAgICBwYWRkaW5nLWxlZnQ6IChAYXVpLWdyaWQgKiAyKTsKfQoKLyogZGVmZW5zaXZlIGhlYWRlciBhbGxvd2FuY2UgKi8KLmF1aS1sYXlvdXQgLmF1aS1ncm91cCA+IGhlYWRlciB7CiAgICBkaXNwbGF5OiB0YWJsZS1jYXB0aW9uOwp9CgovKiAuYXVpLWdyb3VwLXNwbGl0OiB0d28gaXRlbXM7IGFsaWdubWVudCBpcyBsZWZ0LCB0aGVuIHJpZ2h0IChzcGxpdHMgdGhlIGxheW91dCkuICovCi5hdWktZ3JvdXAuYXVpLWdyb3VwLXNwbGl0ID4gLmF1aS1pdGVtIHsKICAgIHRleHQtYWxpZ246IHJpZ2h0Owp9Ci5hdWktZ3JvdXAuYXVpLWdyb3VwLXNwbGl0ID4gLmF1aS1pdGVtOmZpcnN0LWNoaWxkIHsKICAgIHRleHQtYWxpZ246IGxlZnQ7Cn0KCi8qIC5hdWktZ3JvdXAtdHJpbzogdGhyZWUgaXRlbXM7IGFsaWdubWVudCBpcyBsZWZ0LCBjZW50ZXIsIHJpZ2h0ICovCi5hdWktZ3JvdXAuYXVpLWdyb3VwLXRyaW8gPiAuYXVpLWl0ZW0gewogICAgdGV4dC1hbGlnbjogbGVmdDsKfQouYXVpLWdyb3VwLmF1aS1ncm91cC10cmlvID4gLmF1aS1pdGVtICsgLmF1aS1pdGVtIHsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKfQouYXVpLWdyb3VwLmF1aS1ncm91cC10cmlvID4gLmF1aS1pdGVtICsgLmF1aS1pdGVtICsgLmF1aS1pdGVtIHsKICAgIHRleHQtYWxpZ246IHJpZ2h0Owp9CgovKioKICogREVGQVVMVCBUSEVNRSBTUEFDSU5HCiAqLwoKI2NvbnRlbnQgewogICAgbWFyZ2luOiAwOwogICAgcGFkZGluZzogMDsKfQoKLyoqCiAqIFBBR0UgREVTSUdOCiAqLwpib2R5IHsKICAgIGJhY2tncm91bmQ6IEBhdWktYmFja2dyb3VuZC1jb2xvcjsKICAgIGNvbG9yOiBAYXVpLXRleHQtY29sb3I7Cn0KCmEgewogICAgY29sb3I6IEBhdWktbGluay1jb2xvcjsKICAgIHRleHQtZGVjb3JhdGlvbjogQGF1aS1saW5rLWRlY29yYXRpb247Cn0KYTpmb2N1cywKYTpob3ZlciwKYTphY3RpdmUgewogICAgdGV4dC1kZWNvcmF0aW9uOiBAYXVpLWxpbmstZGVjb3JhdGlvbi1hY3RpdmU7Cn0KCiNmb290ZXIgLmZvb3Rlci1ib2R5IHsKICAgIGNvbG9yOiBAYXVpLWZvb3Rlci1ib2R5LXRleHQtY29sb3I7CiAgICBmb250LXNpemU6IEBhdWktZm9udC1zaXplLXNtYWxsOwogICAgbGluZS1oZWlnaHQ6IDEuNjY2NjY2NjY2NjY2Njc7CiAgICBtYXJnaW46IChAYXVpLWdyaWQgKiAyKSAwOwogICAgcGFkZGluZzogMCBAYXVpLWdyaWQgKEBhdWktZ3JpZCAqIDIgKyAxKSBAYXVpLWdyaWQ7CiAgICBtaW4taGVpZ2h0OiA0NHB4OyAvKiBtYXJnaW4gKyBoZWlnaHQgb2YgaW1hZ2UsIG1lYW5zIGZvb3RlciBpcyBqdXN0IGFzIGhpZ2ggaWYgbm8gZm9vdGVyIGxpbmsgcHJlc2VudCAqLwogICAgdGV4dC1hbGlnbjogY2VudGVyOwp9CgoKLyoqCiAqIENPTlRFTlQgUEFORUwKICovCiNjb250ZW50ID4gLmF1aS1wYW5lbCB7CiAgICBiYWNrZ3JvdW5kOiBAYXVpLXBhbmVsLWJnLWNvbG9yOwogICAgbWFyZ2luOiAoQGF1aS1ncmlkICogMikgMCAwIDA7CiAgICBwYWRkaW5nOiAoQGF1aS1ncmlkICogMik7CiAgICBib3JkZXItY29sb3I6IEBhdWktYm9yZGVyLWNvbG9yOwogICAgYm9yZGVyLXN0eWxlOiBAYXVpLWJvcmRlci1zdHlsZTsKICAgIGJvcmRlci13aWR0aDogQGF1aS1ib3JkZXItd2lkdGggMDsKfQoKI2NvbnRlbnQgPiAuYXVpLXBhZ2UtaGVhZGVyIHsKICAgIHBhZGRpbmc6IChAYXVpLWdyaWQgKiAyKTsKfQojY29udGVudCA+IC5hdWktcGFnZS1oZWFkZXIgKyAuYXVpLXBhbmVsIHsKICAgIG1hcmdpbi10b3A6IDA7Cn0KCiNjb250ZW50ID4gLmF1aS1wYWdlLWhlYWRlcjpmaXJzdC1jaGlsZCB7CiAgICBtYXJnaW4tdG9wOiAwOwp9Ci5hdWktcGFuZWwgKyAuYXVpLXBhbmVsIHsKICAgIG1hcmdpbi10b3A6IChAYXVpLWdyaWQgKiAyKTsKfQoKLyohIEFVSSBQYWdlIFBhbmVsICovCi5hdWktcGFnZS1wYW5lbCB7CiAgICBiYWNrZ3JvdW5kOiBAYXVpLXBhbmVsLWJnLWNvbG9yOwogICAgYm9yZGVyOiBAYXVpLWJvcmRlci13aWR0aCBAYXVpLWJvcmRlci10eXBlIEBhdWktYm9yZGVyLWNvbG9yOwogICAgYm9yZGVyLWxlZnQtd2lkdGg6IDA7CiAgICBib3JkZXItcmlnaHQtd2lkdGg6IDA7CiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgY2xlYXI6IGJvdGg7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIG1hcmdpbjogKEBhdWktZ3JpZCAqIDIpIDAgMCAwOwogICAgcGFkZGluZzogMDsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgIHdpZHRoOiAxMDAlOwp9Ci5hdWktcGFnZS1wYW5lbC1pbm5lciB7CiAgICBib3JkZXItc3BhY2luZzogMDsKICAgIGRpc3BsYXk6IHRhYmxlOwogICAgdGFibGUtbGF5b3V0OiBmaXhlZDsKICAgIHdpZHRoOiAxMDAlOwp9Ci5hdWktcGFnZS1wYW5lbC1uYXYsCi5hdWktcGFnZS1wYW5lbC1jb250ZW50LAouYXVpLXBhZ2UtcGFuZWwtaXRlbSwKLmF1aS1wYWdlLXBhbmVsLXNpZGViYXIgewogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7CiAgICBwYWRkaW5nOiAoQGF1aS1ncmlkICogMik7CiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOwp9Ci5hdWktcGFnZS1wYW5lbC1uYXYgewogICAgYm9yZGVyLXJpZ2h0OiBAYXVpLWJvcmRlci13aWR0aCBAYXVpLWJvcmRlci10eXBlIEBhdWktYm9yZGVyLWNvbG9yOwogICAgd2lkdGg6IEBhdWktcGFnZS1uYXYtd2lkdGg7Cn0KLmF1aS1wYWdlLXBhbmVsLXNpZGViYXIgewogICAgd2lkdGg6IEBhdWktcGFnZS1zaWRlYmFyLXdpZHRoOwp9Ci5hdWktcGFnZS1wYW5lbC1pdGVtIHsKICAgIHBhZGRpbmc6IDA7Cn0KLmF1aS1wYWdlLXBhbmVsLW5hdiB+IC5hdWktcGFnZS1wYW5lbC1zaWRlYmFyIHsKICAgIHdpZHRoOiAoQGF1aS1wYWdlLXNpZGViYXItd2lkdGggLSA1KTsKfQovKiBQYWdlIFBhbmVsIEludGVyb3BzICovCi5hdWktcGFnZS1oZWFkZXIgKyAuYXVpLXBhZ2UtcGFuZWwsCi5hdWktbmF2YmFyICsgLmF1aS1wYWdlLXBhbmVsIHsKICAgIG1hcmdpbi10b3A6IDA7Cn0KLmF1aS1uYXZiYXIgKyAuYXVpLXBhZ2UtcGFuZWwgewogICAgYm9yZGVyLXRvcDogbm9uZTsKfQouYXVpLXBhZ2UtcGFuZWwtbmF2ID4gLmF1aS1uYXYtdmVydGljYWwgewogICAgbWFyZ2luLWxlZnQ6IC0oQGF1aS1ncmlkKTsKICAgIG1hcmdpbi1yaWdodDogLShAYXVpLWdyaWQpOwp9CgovKioKICogUGFnZSB2YXJpYXRpb25zCiAqLwouYXVpLXBhZ2UtZm9jdXNlZCAuYXVpLXBhZ2UtaGVhZGVyLAouYXVpLXBhZ2UtZm9jdXNlZCAuYXVpLXBhZ2UtcGFuZWwsCi5hdWktcGFnZS1mb2N1c2VkICNmb290ZXIgLmZvb3Rlci1ib2R5LAouYXVpLXBhZ2Utbm90aWZpY2F0aW9uIC5hdWktcGFnZS1oZWFkZXIsCi5hdWktcGFnZS1ub3RpZmljYXRpb24gLmF1aS1wYWdlLXBhbmVsLAouYXVpLXBhZ2Utbm90aWZpY2F0aW9uICNmb290ZXIgLmZvb3Rlci1ib2R5LAouYXVpLXBhZ2UtZml4ZWQgLmF1aS1oZWFkZXItaW5uZXIsCi5hdWktcGFnZS1maXhlZCAuYXVpLXBhZ2UtaGVhZGVyLWlubmVyLAouYXVpLXBhZ2UtZml4ZWQgLmF1aS1uYXZncm91cC1ob3Jpem9udGFsIC5hdWktbmF2Z3JvdXAtaW5uZXIsCi5hdWktcGFnZS1maXhlZCAuYXVpLXBhZ2UtcGFuZWwtaW5uZXIsCi5hdWktcGFnZS1maXhlZCAjZm9vdGVyIC5mb290ZXItYm9keSwKLmF1aS1wYWdlLWh5YnJpZCAuYXVpLXBhZ2UtaGVhZGVyLAouYXVpLXBhZ2UtaHlicmlkIC5hdWktbmF2Z3JvdXAtaG9yaXpvbnRhbCAuYXVpLW5hdmdyb3VwLWlubmVyLAouYXVpLXBhZ2UtaHlicmlkIC5hdWktcGFnZS1wYW5lbC1pbm5lciwKLmF1aS1wYWdlLWh5YnJpZCAjZm9vdGVyIC5mb290ZXItYm9keSB7CiAgICBtYXJnaW4tbGVmdDogYXV0bzsKICAgIG1hcmdpbi1yaWdodDogYXV0bzsKICAgIHdpZHRoOiBAYXVpLXBhZ2Utd2lkdGgteGxhcmdlOwp9CgovKiBleHRyYSB3aWR0aCBzbyBsZWZ0IGVkZ2Ugb2YgaG92ZXJhYmxlIGNvbnRlbnQgYWxpZ25zIHdpdGggbGVmdCBlZGdlIG9mIGNvbnRlbnQgd2hpbGUgaW5hY3RpdmUuIE9uIGhvdmVyLCB0aGUgaG92ZXIgYWZmb3JkYW5jZSBkb2VzIGV4dGVuZCBvdXRzaWRlIHRoZSBhbGlnbm1lbnQgYnV0IHRoaXMgbG9va3MgYmV0dGVyIHRoYW4gdGhlIG90aGVyIHdheSBhcm91bmQuICovCi5hdWktcGFnZS1maXhlZCAuYXVpLWhlYWRlci1pbm5lciwKLmF1aS1wYWdlLWZpeGVkIC5hdWktbmF2Z3JvdXAtaG9yaXpvbnRhbCAuYXVpLW5hdmdyb3VwLWlubmVyLAouYXVpLXBhZ2UtaHlicmlkIC5hdWktbmF2Z3JvdXAtaG9yaXpvbnRhbCAuYXVpLW5hdmdyb3VwLWlubmVyIHsKICAgIHdpZHRoOiAoQGF1aS1wYWdlLXdpZHRoLXhsYXJnZSArIChAYXVpLWdyaWQgKiAyKSk7Cn0KCi5hdWktcGFnZS1mb2N1c2VkLAouYXVpLXBhZ2Utc2l6ZSB7CiAgICAmLXNtYWxsIHsKICAgICAgICAuYXVpLXBhZ2UtaGVhZGVyLAogICAgICAgIC5hdWktcGFnZS1wYW5lbCwKICAgICAgICAjZm9vdGVyIC5mb290ZXItYm9keSB7CiAgICAgICAgICAgIHdpZHRoOiBAYXVpLXBhZ2Utd2lkdGgtc21hbGw7CiAgICAgICAgfQogICAgfQogICAgJi1tZWRpdW0gewogICAgICAgIC5hdWktcGFnZS1oZWFkZXIsCiAgICAgICAgLmF1aS1wYWdlLXBhbmVsLAogICAgICAgICNmb290ZXIgLmZvb3Rlci1ib2R5IHsKICAgICAgICAgICAgd2lkdGg6IEBhdWktcGFnZS13aWR0aC1tZWRpdW07CiAgICAgICAgfQogICAgfQogICAgJi1sYXJnZSB7CiAgICAgICAgLmF1aS1wYWdlLWhlYWRlciwKICAgICAgICAuYXVpLXBhZ2UtcGFuZWwsCiAgICAgICAgI2Zvb3RlciAuZm9vdGVyLWJvZHkgewogICAgICAgICAgICB3aWR0aDogQGF1aS1wYWdlLXdpZHRoLWxhcmdlOwogICAgICAgIH0KICAgIH0KICAgICYteGxhcmdlIHsKICAgICAgICAuYXVpLXBhZ2UtaGVhZGVyLAogICAgICAgIC5hdWktcGFnZS1wYW5lbCwKICAgICAgICAjZm9vdGVyIC5mb290ZXItYm9keSB7CiAgICAgICAgICAgIHdpZHRoOiBAYXVpLXBhZ2Utd2lkdGgteGxhcmdlOwogICAgICAgIH0KICAgIH0KfQoKLmF1aS1wYWdlLWZvY3VzZWQsCi5hdWktcGFnZS1ub3RpZmljYXRpb24gewogICAgLmF1aS1wYWdlLXBhbmVsIHsKICAgICAgICBib3JkZXItcmFkaXVzOiBAYXVpLWJvcmRlci1yYWRpdXMtbWVkaXVtOwogICAgICAgIGJvcmRlci13aWR0aDogQGF1aS1ib3JkZXItd2lkdGg7CiAgICB9Cn0KCi5hdWktcGFnZS1maXhlZCAuYXVpLXBhZ2UtcGFuZWwtaW5uZXIsCi5hdWktcGFnZS1maXhlZCAjY29udGVudCA+IC5hdWktcGFnZS1oZWFkZXIgewogICAgcGFkZGluZy1sZWZ0OiAwOwogICAgcGFkZGluZy1yaWdodDogMDsKfQoKLmF1aS1wYWdlLWZpeGVkIC5hdWktcGFnZS1wYW5lbC1uYXY6Zmlyc3QtY2hpbGQsCi5hdWktcGFnZS1maXhlZCAuYXVpLXBhZ2UtcGFuZWwtY29udGVudDpmaXJzdC1jaGlsZCwKLmF1aS1wYWdlLWZpeGVkIC5hdWktcGFnZS1wYW5lbC1pdGVtOmZpcnN0LWNoaWxkLAouYXVpLXBhZ2UtZml4ZWQgLmF1aS1wYWdlLXBhbmVsLXNpZGViYXI6Zmlyc3QtY2hpbGQsCi5hdWktcGFnZS1oeWJyaWQgLmF1aS1wYWdlLXBhbmVsLW5hdjpmaXJzdC1jaGlsZCwKLmF1aS1wYWdlLWh5YnJpZCAuYXVpLXBhZ2UtcGFuZWwtY29udGVudDpmaXJzdC1jaGlsZCwKLmF1aS1wYWdlLWh5YnJpZCAuYXVpLXBhZ2UtcGFuZWwtaXRlbTpmaXJzdC1jaGlsZCwKLmF1aS1wYWdlLWh5YnJpZCAuYXVpLXBhZ2UtcGFuZWwtc2lkZWJhcjpmaXJzdC1jaGlsZCB7CiAgICBwYWRkaW5nLWxlZnQ6IDA7Cn0KLmF1aS1wYWdlLWZpeGVkIC5hdWktcGFnZS1wYW5lbC1uYXY6bGFzdC1jaGlsZCwKLmF1aS1wYWdlLWZpeGVkIC5hdWktcGFnZS1wYW5lbC1jb250ZW50Omxhc3QtY2hpbGQsCi5hdWktcGFnZS1maXhlZCAuYXVpLXBhZ2UtcGFuZWwtaXRlbTpsYXN0LWNoaWxkLAouYXVpLXBhZ2UtZml4ZWQgLmF1aS1wYWdlLXBhbmVsLXNpZGViYXI6bGFzdC1jaGlsZCwKLmF1aS1wYWdlLWh5YnJpZCAuYXVpLXBhZ2UtcGFuZWwtbmF2Omxhc3QtY2hpbGQsCi5hdWktcGFnZS1oeWJyaWQgLmF1aS1wYWdlLXBhbmVsLWNvbnRlbnQ6bGFzdC1jaGlsZCwKLmF1aS1wYWdlLWh5YnJpZCAuYXVpLXBhZ2UtcGFuZWwtaXRlbTpsYXN0LWNoaWxkLAouYXVpLXBhZ2UtaHlicmlkIC5hdWktcGFnZS1wYW5lbC1zaWRlYmFyOmxhc3QtY2hpbGQgewogICAgcGFkZGluZy1yaWdodDogMDsKfQoKLyogcmVzZXQgdG8gMTAwJSBpbnNpZGUgcGFnZSBwYW5lbCAqLwouYXVpLXBhZ2UtcGFuZWwgLmF1aS1wYWdlLWhlYWRlciB7CiAgICB3aWR0aDogYXV0bzsKfQouYXVpLXBhZ2UtcGFuZWwgLmF1aS1wYWdlLWhlYWRlci1pbm5lciB7CiAgICB3aWR0aDogMTAwJTsKfQoKCi8qKgogKiBUQUJTIEFTIEZJUlNUIENISUxEIElOIENPTlRFTlQKICogRXhwbGljaXRseSBzZXRzIGJnIHRvIHdoaXRlLCBjaGFuZ2VzIGhvcml6b250YWwgaG92ZXJzIHRvIHdvcmsgb24gZ3JleS4KICogUmVtZW1iZXIgdGhlc2UgZXh0ZW5kIHRoZSBzdGFuZGFyZCBjb21wb25lbnQgc3R5bGVzLgogKi8KCiNjb250ZW50ID4gLmF1aS10YWJzIHsKICAgIG1hcmdpbjogKEBhdWktZ3JpZCAqIDIpOwogICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7Cn0KCiNjb250ZW50ID4gLmF1aS10YWJzID4gLnRhYnMtcGFuZSB7CiAgICBwYWRkaW5nOiAoQGF1aS1ncmlkICogMik7Cn0KCiNjb250ZW50ID4gLmF1aS10YWJzLmhvcml6b250YWwtdGFicyA+IC50YWJzLXBhbmUgewogICAgYm9yZGVyOiBAYXVpLWJvcmRlci13aWR0aCBAYXVpLWJvcmRlci10eXBlIEBhdWktYm9yZGVyLWNvbG9yOwogICAgYm9yZGVyLXJhZGl1czogQGF1aS1ib3JkZXItcmFkaXVzLXNtYWxsOwogICAgYmFja2dyb3VuZDogQGF1aS1wYW5lbC1iZy1jb2xvcjsKfQoKI2NvbnRlbnQgPiAuYXVpLXRhYnMuaG9yaXpvbnRhbC10YWJzID4gLnRhYnMtbWVudSB7CiAgICBkaXNwbGF5OiB0YWJsZTsgLyogc3RvcHMgYSBnYXAgYXBwZWFyaW5nICovCn0KCi8qKgogKiBBVUkgRm9ybXMgaW5zaWRlIG9mIGEgZm9jdXNlZCBwYWdlCiAqLwoKLmF1aS1wYWdlLWZvY3VzZWQgLmF1aS1wYWdlLXBhbmVsLWNvbnRlbnQgPiBoMjpmaXJzdC1jaGlsZCwKLmF1aS1wYWdlLW5vdGlmaWNhdGlvbiAuYXVpLXBhZ2UtcGFuZWwtY29udGVudCA+IGgxOmZpcnN0LWNoaWxkIHsKICAgIGJvcmRlci1ib3R0b206IEBhdWktYm9yZGVyLXdpZHRoIEBhdWktYm9yZGVyLXR5cGUgQGF1aS1ib3JkZXItY29sb3I7CiAgICBtYXJnaW4tYm90dG9tOiAoQGF1aS1ncmlkICogMik7CiAgICBwYWRkaW5nLWJvdHRvbTogKEBhdWktZ3JpZCAqIDIpOwp9CgouYXVpLXBhZ2Utbm90aWZpY2F0aW9uIHsKICAgIC5hdWktcGFnZS1wYW5lbCB7CiAgICAgICAgbWFyZ2luLXRvcDogQGF1aS1wYWdlLW5vdGlmaWNhdGlvbi1wYW5lbC1tYXJnaW4tdG9wOwogICAgfQoKICAgIC5hdWktcGFnZS1wYW5lbC1jb250ZW50IHsKICAgICAgICBjb2xvcjogQGF1aS1jb2xvci1tZWRpdW0tZ3JheTsKICAgICAgICBwYWRkaW5nOiBAYXVpLXBhZ2Utbm90aWZpY2F0aW9uLWNvbnRlbnQtcGFkZGluZzsKICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CgogICAgICAgIC5hdWktcGFnZS1ub3RpZmljYXRpb24tZGVzY3JpcHRpb24gewogICAgICAgICAgICBmb250LXNpemU6IEBhdWktZm9udC1zaXplLXhsYXJnZTsKICAgICAgICB9CgogICAgICAgIGZvcm0uYXVpIC50ZXh0IHsKICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiBAYXVpLXBhZ2Utbm90aWZpY2F0aW9uLXBhbmVsLWNvbnRlbnQtZm9ybS10ZXh0LW1hcmdpbi1yaWdodDsKICAgICAgICB9CiAgICB9CgogICAgJi1kZXRhaWxzIHsKICAgICAgICBtYXJnaW46IDAgYXV0bzsKICAgICAgICBtYXgtd2lkdGg6IEBhdWktcGFnZS1ub3RpZmljYXRpb24tZGV0YWlscy1taW4td2lkdGg7CiAgICAgICAgd2lkdGg6IEBhdWktcGFnZS13aWR0aC14bGFyZ2U7CgogICAgICAgICYtaGVhZGVyIHsKICAgICAgICAgICAgY29sb3I6IEBhdWktY29sb3ItbWVkaXVtLWdyYXk7CiAgICAgICAgICAgIG1hcmdpbjogQGF1aS1wYWdlLW5vdGlmaWNhdGlvbi1kZXRhaWxzLWhlYWRlci10b3AtbWFyZ2luIGF1dG8gMDsKICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CgogICAgICAgICAgICAmLWV4cGFuZGVyIHsKICAgICAgICAgICAgICAgICY6OmJlZm9yZSB7CiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIEBhdWktYm9yZGVyLWNvbG9yOwogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcnOwogICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgICAgICAgICAgICAgIGxlZnQ6IDA7CiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAwOwogICAgICAgICAgICAgICAgICAgIHRvcDogNTAlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC5hdWktZXhwYW5kZXItdHJpZ2dlciB7CiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogQGF1aS1idXR0b24tZGVmYXVsdC1iZy1jb2xvcjsKICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogQGF1aS1wYWdlLW5vdGlmaWNhdGlvbi1kZXRhaWxzLWhlYWRlci1leHBhbmRlci10cmlnZ2VyLXBhZGRpbmc7CiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgouYXVpLXBhZ2UtZm9jdXNlZCAuYXVpLXBhZ2UtcGFuZWwtY29udGVudCA+IGZvcm0uYXVpIC5idXR0b25zLWNvbnRhaW5lciB7CiAgICBib3JkZXItdG9wOiBAYXVpLWJvcmRlci13aWR0aCBAYXVpLWJvcmRlci10eXBlIEBhdWktYm9yZGVyLWNvbG9yOwogICAgbWFyZ2luLXRvcDogKEBhdWktZ3JpZCAqIDIpOwogICAgcGFkZGluZy10b3A6IChAYXVpLWdyaWQgKiAyKTsKfQoKLy8gcmVzcG9uc2l2ZSBsYXlvdXQgbWl4aW5zCi5hdWktcmVzcG9uc2l2ZS1sYXlvdXQtZnVsbC13aWR0aCgpIHsKICAgIC5hdWktcGFnZS1oZWFkZXIsCiAgICAuYXVpLXBhZ2UtcGFuZWwgewogICAgICAgICNhdWkuYm94LXNpemluZyhib3JkZXItYm94KTsKICAgICAgICB3aWR0aDogMTAwJTsKICAgIH0KCiAgICAuYXVpLXBhZ2UtcGFuZWwgewogICAgICAgIG1hcmdpbi10b3A6IDA7CiAgICB9Cn0KCi5hdWktcmVzcG9uc2l2ZS1sYXlvdXQtcmVtb3ZlLWJvcmRlcnMoKSB7CiAgICAuYXVpLXBhZ2UtcGFuZWwgewogICAgICAgICNhdWkuYm9yZGVyLXJhZGl1cygwKTsKICAgICAgICBib3JkZXItbGVmdDogMDsKICAgICAgICBib3JkZXItcmlnaHQ6IDA7CiAgICB9Cn0KCiNhdWkucmVzcG9uc2l2ZS1zbWFsbCh7CiAgICAuYXVpLWdyb3VwIHsKICAgICAgICA+IC5hdWktaXRlbSB7CiAgICAgICAgZGlzcGxheTogYmxvY2s7CiAgICAgICAgd2lkdGg6IGF1dG87CgogICAgICAgICAgICArIC5hdWktaXRlbSB7CiAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDA7CiAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDogQGF1aS1ncmlkOwogICAgICAgICAgICB9CiAgICB9CgogICAgJi5hdWktZ3JvdXAtc3BsaXQsCiAgICAmLmF1aS1ncm91cC10cmlvIHsKICAgICAgICAgICAgPiAuYXVpLWl0ZW0sID4gLmF1aS1pdGVtICsgLmF1aS1pdGVtLAogICAgICAgICAgICA+IC5hdWktaXRlbSArIC5hdWktaXRlbSArIC5hdWktaXRlbSB7CiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIC5hdWktcGFnZS1maXhlZCwKICAgIC5hdWktcGFnZS1oeWJyaWQgewogICAgICAgICNjb250ZW50ID4gLmF1aS1wYWdlLWhlYWRlciwKICAgICAgICAuYXVpLXBhZ2UtcGFuZWwtaW5uZXIsCiAgICAgICAgLmF1aS1oZWFkZXItaW5uZXIsCiAgICAgICAgLmF1aS1uYXZncm91cC1ob3Jpem9udGFsIC5hdWktbmF2Z3JvdXAtaW5uZXIsCiAgICAgICAgI2Zvb3RlciAuZm9vdGVyLWJvZHkgewogICAgICAgICAgICAjYXVpLmJveC1zaXppbmcoYm9yZGVyLWJveCk7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgIH0KICAgIH0KCiAgICAuYXVpLXBhZ2UtaGVhZGVyLWlubmVyIHsKICAgICAgICBkaXNwbGF5OiBibG9jazsKICAgICAgICB3aWR0aDogMTAwJTsKICAgIH0KCiAgICAuYXVpLXBhZ2UtaGVhZGVyLWFjdGlvbnMgewogICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgIHdpZHRoOiBhdXRvOwogICAgICAgIHRleHQtYWxpZ246IGxlZnQ7CiAgICAgICAgbWFyZ2luLXRvcDogKEBhdWktZ3JpZCAgKiAyKTsKICAgICAgICBwYWRkaW5nLWxlZnQ6IDA7CiAgICAgICAgcGFkZGluZy1yaWdodDogKEBhdWktZ3JpZCAqIDIpCiAgICB9Cn0pOwoKI2F1aS5yZXNwb25zaXZlLW1lZGl1bSh7CiAgICAuYXVpLXBhZ2UtaHlicmlkIHsKICAgICAgICAuYXVpLXBhZ2UtaGVhZGVyLAogICAgICAgIC5hdWktcGFnZS1wYW5lbC1pbm5lciwKICAgICAgICAuYXVpLXBhZ2UtZml4ZWQgLmF1aS1oZWFkZXItaW5uZXIsCiAgICAgICAgLmF1aS1uYXZncm91cC1ob3Jpem9udGFsIC5hdWktbmF2Z3JvdXAtaW5uZXIgewogICAgICAgICAgICAjYXVpLmJveC1zaXppbmcoYm9yZGVyLWJveCk7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgIH0KICAgIH0KfSk7CgojYXVpLnJlc3BvbnNpdmUtbGFyZ2UoewogICAgLmF1aS1wYWdlLWZpeGVkLAogICAgLmF1aS1wYWdlLWh5YnJpZCB7CiAgICAgICAgI2NvbnRlbnQgPiAuYXVpLXBhZ2UtaGVhZGVyLAogICAgICAgIC5hdWktcGFnZS1wYW5lbC1pbm5lciB7CiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogKEBhdWktZ3JpZCAqIDIpOwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAoQGF1aS1ncmlkICogMik7CiAgICAgICAgfQogICAgfQoKICAgIC5hdWktcGFnZS1wYW5lbC1jb250ZW50LAogICAgLmF1aS1wYWdlLXBhbmVsLXNpZGViYXIgewogICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgIHBhZGRpbmctbGVmdDogMDsKICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwOwogICAgICAgIHdpZHRoOiBhdXRvOwogICAgfQoKICAgIC5hdWktcGFnZS1maXhlZCAuYXVpLWhlYWRlci1pbm5lciwKICAgIC5hdWktcGFnZS1maXhlZCAuYXVpLXBhZ2UtaGVhZGVyLWlubmVyLAogICAgLmF1aS1wYWdlLWZpeGVkIC5hdWktcGFnZS1wYW5lbC1pbm5lciwKICAgIC5hdWktcGFnZS1maXhlZCAjZm9vdGVyIC5mb290ZXItYm9keSB7CiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgICAgICB3aWR0aDoxMDAlOwogICAgfQp9KTsKCi8vIEdlbmVyYWwgcmVzcG9uc2l2ZSBsYXlvdXQgYnJlYWtwb2ludHMKaHRtbC5hdWktcmVzcG9uc2l2ZSB7CgogICAgLy8gc28gdGhhdCB0ZXh0IGluIHRoZSBmb290ZXIgd3JhcHMgY29ycmVjdGx5CiAgICAjZm9vdGVyIC5mb290ZXItYm9keSA+IHVsID4gbGkgewogICAgICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7CiAgICB9CgogICAgLy8gRm9jdXNlZCBwYWdlIHJlc3BvbnNpdmUgbGF5b3V0IGJyZWFrcG9pbnRzCiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MDBweCkgewogICAgICAgIC5hdWktcGFnZS1mb2N1c2VkLXNtYWxsIHsKICAgICAgICAgICAgLmF1aS1yZXNwb25zaXZlLWxheW91dC1mdWxsLXdpZHRoKCk7CiAgICAgICAgICAgIC5hdWktcmVzcG9uc2l2ZS1sYXlvdXQtcmVtb3ZlLWJvcmRlcnMoKTsKICAgICAgICB9CiAgICB9CgogICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAwcHgpIHsKICAgICAgICAuYXVpLXBhZ2UtZm9jdXNlZC1tZWRpdW0gewogICAgICAgICAgICAuYXVpLXJlc3BvbnNpdmUtbGF5b3V0LWZ1bGwtd2lkdGgoKTsKICAgICAgICAgICAgLmF1aS1yZXNwb25zaXZlLWxheW91dC1yZW1vdmUtYm9yZGVycygpOwogICAgICAgIH0KICAgIH0KCiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA4MDBweCkgewogICAgICAgIC5hdWktcGFnZS1mb2N1c2VkLWxhcmdlIHsKICAgICAgICAgICAgLmF1aS1yZXNwb25zaXZlLWxheW91dC1mdWxsLXdpZHRoKCk7CiAgICAgICAgICAgIC5hdWktcmVzcG9uc2l2ZS1sYXlvdXQtcmVtb3ZlLWJvcmRlcnMoKTsKICAgICAgICB9CiAgICB9CgogICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogOTgwcHgpIHsKICAgICAgICAuYXVpLXBhZ2UtZm9jdXNlZC14bGFyZ2UgewogICAgICAgICAgICAuYXVpLXJlc3BvbnNpdmUtbGF5b3V0LWZ1bGwtd2lkdGgoKTsKICAgICAgICAgICAgLmF1aS1yZXNwb25zaXZlLWxheW91dC1yZW1vdmUtYm9yZGVycygpOwogICAgICAgIH0KICAgIH0KfQoKI2Zvb3RlciAuZm9vdGVyLWJvZHksCiNmb290ZXItbG9nbyBhIHsKICAgIGJhY2tncm91bmQ6IHVybChkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUIzYVdSMGFEMGlNVEUwSWlCb1pXbG5hSFE5SWpJMElpQjJhV1YzUW05NFBTSXdJREFnTVRFMElESTBJaUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lQanhuSUdacGJHdzlJaU0zTURjd056QWlQanhuUGp4d1lYUm9JR1E5SWsweU55NHlNRFl1TWpZMVl5MHVNVEV5TFM0eE5UUXRMakk1TWkwdU1qUTNMUzQwT0MwdU1qUTNMUzR3T1RjZ01DMHVNVGt5TGpBeU5TMHVNamMyTGpBM01pMHpMalV4TnlBeExqazNOaTAzTGpVNU5DQXpMakF5TFRFeExqYzVJRE11TURJeUxUUXVNVGsySURBdE9DNHlOekl0TVM0d05EWXRNVEV1TnprdE15NHdNaTB1TURnekxTNHdOUzB1TVRjNExTNHdOelF0TGpJM05TMHVNRGMwTFM0eE9EZ2dNQzB1TXpZNExqQTVNeTB1TkRndU1qUTNMUzR4TmpZdU1qSTNMUzR4Tnk0Mk1EZ3VNVEV5TGpnek5TQXhMamMySURFdU16UTRJRE11TnpBeklESXVOQ0ExTGpjM0lETXVNVElnTWk0eE5EUXVOelEySURRdU16ZzJJREV1TVRJMUlEWXVOall6SURFdU1USTJJREl1TWpjNElEQWdOQzQxTWkwdU16Z2dOaTQyTmpNdE1TNHhNallnTWk0d05qZ3RMamN5SURRdU1ERXRNUzQzTnpJZ05TNDNOek10TXk0eE1pNHlPQzB1TWpJM0xqSTNOaTB1TmpBNExqRXhMUzQ0TXpVaUx6NDhjR0YwYUNCa1BTSk5NVFF1TmpZeklEY3VNek0yWXk0NUlEQWdNUzQwTWkwdU1EVTFJREV1TmpBMExTNHdOVFV1TWpJeUlEQWdMalF6TkM0eE9EZ3VORE0wTGpRMUlEQWdMakEzTlMwdU1ERTJMakV6TFM0d016UXVNVGM0TFM0eE1pNHpNamN0TGpZMk15QXhMalV3TkMweExqWTNOQ0F5TGpVeE5DMHVNVEUwTGpFeE15MHVNalF5TGpFek5TMHVNek11TVRNMWFDMHVNREF5WXkwdU1EZzRJREF0TGpJeE55MHVNREl5TFM0ek15MHVNVE0xTFRFdU1ERXlMVEV1TURFdE1TNDFOVFl0TWk0eE9EY3RNUzQyTnpVdE1pNDFNVFF0TGpBeE9DMHVNRFE0TFM0d016VXRMakV3TXkwdU1ETTFMUzR4T0NBd0xTNHlOaTR5TVRJdExqUTBOeTQwTXpRdExqUTBOeTR4T0RNZ01DQXVOekExTGpBMU5pQXhMall3TXk0d05UWm9MakF3TmlJdlBqeHdZWFJvSUdROUlrMHlNeTR4TmpRZ05TNDRPVFJqTFM0d09EUXRMakEyTmkwdU1UZzBMUzR4TFM0eU9EWXRMakV0TGpBMU55QXdMUzR4TVRRdU1ERXRMakUzTGpBek1pMHhMakF4T0M0MExUSXVNRFV6TGpjd05DMHlMams1T0M0NU15MHVNVGt5TGpBME5pMHVNelE0TGpFNU15MHVOREV6TGpNM0xTNDJPRGdnTVM0NU16VXRNaTQwTkRZZ015NDNOemN0TkM0eU9TQTFMamN3T0MwdU1EYzBMakEzTWkwdU1UYzRMakUyTnkwdU16UTJMakUyTnkwdU1UWTRJREF0TGpJM0xTNHdPUzB1TXpRMkxTNHhOall0TVM0NE5EUXRNUzQ1TXkwekxqWXRNeTQzTmpjdE5DNHlPUzAxTGpjd01pMHVNRFkwTFM0eE56WXRMakl5TFM0ek1qTXRMalF4TXkwdU16Y3RMamswTkMwdU1qSTFMVEV1T1RneUxTNDFOQzB6TFM0NU5DMHVNRFUwTFM0d01pMHVNVEV0TGpBekxTNHhOamd0TGpBekxTNHhNRElnTUMwdU1pNHdNekl0TGpJNE5TNHdPVGd0TGpFekxqRXdNaTB1TVRrNExqSTJPQzB1TVRnekxqUXlOeTR4TlRZZ01TNDJNUzQzTnpZZ015NHhPRE1nTVM0NE9UUWdOQzQ0TXlBeExqQTFJREV1TlRVZ01pNDBNaklnTWk0NU9EWWdNeTQzTkRjZ05DNHpOek1nTWk0ME5ETWdNaTQxTlRjZ05DNDNOU0EwTGprM01pQTBMamsxTWlBM0xqYzNNaTR3TVRndU1qVXlMakl5TXk0ME5EZ3VORGN1TkRRNGFESXVPRGRqTGpFeklEQWdMakkxTWkwdU1EVTFMak0wTWkwdU1UVXVNRGczTFM0d09UY3VNVE0wTFM0eU1qWXVNVEk0TFM0ek5UZ3RMakE1TFRFdU9EY3lMUzQzTnpjdE15NDNORGN0TWk0d09UZ3ROUzQzTXkwdU1qYzNMUzQwTVRjdExqVTNOQzB1T0RJeUxTNDRPRFF0TVM0eU1UZ3RMakV5TmkwdU1UWXRMakEzTkMwdU16WXVNREl6TFM0ME5qSnNMakk0TmkwdU16QXlZekV1TXpJMkxURXVNemczSURJdU5qazJMVEl1T0RJeUlETXVOelE0TFRRdU16Y3lJREV1TVRFNExURXVOalE0SURFdU56TTNMVE11TWpFeUlERXVPRGt6TFRRdU9ESXVNREUyTFM0eE5qTXRMakExTmkwdU16TTFMUzR4T0RNdExqUXpOQ0l2UGp4d1lYUm9JR1E5SWsweE1TNDFPRElnTVRjdU5qazRZeTB1TURZNExTNHdOekl0TGpFMk9DMHVNVFEzTFM0ek16VXRMakUwTnkwdU1qRTBJREF0TGpNMExqRTFNeTB1TXprdU1qSTRMVEV1TWpBMklERXVPRGcxTFRFdU9ETWdNeTQyTmpRdE1TNDVNVFlnTlM0ME5USXRMakF3TlM0eE16SXVNRFF5TGpJMk15NHhNeTR6Tmk0d09TNHdPVFV1TWpFMUxqRTFMak0wTkM0eE5XZ3lMamcyTldNdU1qUTFJREFnTGpRMU15MHVNVGs0TGpRM0xTNDBOUzR3TmpNdExqZzJNaTR6TWpVdE1TNDNNall1T0MweUxqWXpNeTR4TmpVdExqTXhOQzR3TXpjdExqWXhMUzR3TlRndExqY3pOUzB1TkRjeUxTNDJNeTB4TGpBMUxURXVNekF5TFRFdU9URXRNaTR5TWpRaUx6NDhMMmMrUEdjK1BIQmhkR2dnWkQwaVRUTTBMakEzSURZdU5EVTNZeTB1TURVM0xTNHhPRFl0TGpJeU5TMHVNekV6TFM0ME1UVXRMak14TTJndE5DNHdOamhqTFM0eE9TQXdMUzR6TlRndU1USTNMUzQwTVRVdU16RXpUREkwTGpBMElESXpMakUyWXkwdU1EUXVNVE0yTFM0d01UZ3VNamcwTGpBMk5TNDBMakE0TWk0eE1UUXVNakV5TGpFNE1pNHpOUzR4T0RKb01pNDRZeTR4T1RRZ01DQXVNelkwTFM0eE15NDBNaTB1TXpKc015NDFNek10TVRJdU1qZzFjeTR3T1RJdExqTXdOeTQwTVRJdExqTXdOMk11TXpJMklEQWdMalF3TlM0ek1pNDBNRFV1TXpKc01TNDJOQ0ExTGpneU5FZ3pNUzQwTm1NdExqRTVOU0F3TFM0ek5qY3VNVE16TFM0ME1pNHpNalpzTFM0Mk16SWdNaTR6TURkakxTNHdNemN1TVRNMUxTNHdNUzR5T0M0d056TXVNemt1TURneUxqRXhNaTR5TVM0eE56Z3VNelEzTGpFM09HZ3pMamMxYkM0NU9TQXpMakkxTTJNdU1EVTFMakU0Tmk0eU1qUXVNekUwTGpReE5TNHpNVFJvTWk0NFl5NHhOQ0F3SUM0eU55MHVNRFk0TGpNMU15MHVNVGd6TGpBNE1pMHVNVEUyTGpFd05TMHVNalkwTGpBMk5DMHVORXd6TkM0d055QTJMalExTnlJdlBqeHdZWFJvSUdROUlrMDBOaTR5TnlBeU1TNHhOamhqTFM0d01pMHVNVEkxTFM0d09EY3RMakl6TmkwdU1Ua3RMak13TmkwdU1UQXlMUzR3TnkwdU1qSTNMUzR3T1RJdExqTTBOeTB1TURZeUxTNDBOVFF1TVRFMkxTNDRPUzR4T0MweExqSXlOaTR4T0MwdU5qTTNJREF0TGpreUxTNHlPRE10TGpreUxTNDVNbll0Tmk0MGFESXVOV011TWpRZ01DQXVORE0xTFM0eUxqUXpOUzB1TkRRMmRpMHhMams1Tm1Nd0xTNHlORGN0TGpFNU5TMHVORFEzTFM0ME16WXRMalEwTjJndE1pNDFWamN1Tmpsak1DMHVNVE10TGpBMU5TMHVNalV6TFM0eE5TMHVNek00TFM0d09UVXRMakE0TlMwdU1qSXlMUzR4TWpRdExqTTBOaTB1TVRBMmJDMHlMalUzTkM0ek5qaGpMUzR5TVRZdU1ETXRMak0zTmk0eU1pMHVNemMyTGpRME0zWXlMamN4TkdndE1TNDBNREpqTFM0eU5DQXdMUzQwTXpZdU1pMHVORE0yTGpRME9IWXhMams1Tm1Nd0lDNHlORGN1TVRrMUxqUTBOeTQwTXpZdU5EUTNhREV1TkRBeWRqWXVPREUwWXpBZ01pNHpOQ0F4TGpFNU9DQXpMalV5TmlBekxqVTJJRE11TlRJMkxqWTNOQ0F3SURFdU9ERTJMUzR4TmlBeUxqVTJNeTB1TkRJMUxqRTVPQzB1TURjdU16SXRMakkzTnk0eU9EZ3RMalE1YkMwdU1qZ3RNUzQ1TVRjaUx6NDhjR0YwYUNCa1BTSk5OVEV1TURNMklEVXVPREU0U0RRNExqUTJZeTB1TWpRZ01DMHVORE0xTGpJdExqUXpOUzQwTkRoMk1UY3VNREk0WXpBZ0xqSTBPQzR4T1RZdU5EUTRMalF6Tmk0ME5EaG9NaTQxTnpaakxqSTBJREFnTGpRek5TMHVNaTQwTXpVdExqUTBPRlkyTGpJMk5tTXdMUzR5TkRndExqRTVOQzB1TkRRNExTNDBNelF0TGpRME9DSXZQanh3WVhSb0lHUTlJazAxT1M0ek9ETWdNVGd1T1RnMmRqRXVOVFUyWXkwdU5ESTNMakl6TXkweExqSXVOVFk0TFRJdU1UTXVOVFk0TFM0NE1ETWdNQzB4TGpBME55MHVNalV0TVM0d05EY3RNUzR3TnpVZ01DMHVPQzR4TlMweExqQTFJREV1TURrM0xURXVNRFZvTWk0d09IcHRMVEV1TnpJNExUZ3VORGMwWXkweExqTXdNeUF3TFRJdU9Ea3VNakV0TkM0d05DNDFNemd0TGpJeE5TNHdOaTB1TXpVdU1qYzNMUzR6TVRRdU5UQXliQzR6TURJZ01TNDVNVGhqTGpBeUxqRXlMakE0TkM0eU1qWXVNVGd1TWprMkxqQTVOeTR3Tnk0eU1UY3VNRGsxTGpNek5DNHdOeklnTVM0d055MHVNakUwSURJdU1UYzFMUzR6TXpJZ015NHhNUzB1TXpNeUlERXVPRFlnTUNBeUxqRTFOeTQwTURNZ01pNHhOVGNnTVM0Mk9UVjJNUzR4TWpob0xUSXVOelpqTFRJdU5qTTNJREF0TXk0M05qTWdNUzR4TVRZdE15NDNOak1nTXk0M016TWdNQ0F5TGpVd05DQXhMakl6TkNBekxqazBJRE11TXpnMUlETXVPVFFnTVM0eU5EVWdNQ0F5TGpRNUxTNHpOVFFnTXk0MU16Z3RNUzR3TUROc0xqRXhMalF4TldNdU1EVXlMakU1TlM0eU1qUXVNek11TkRJdU16Tm9NaTR3T0dNdU1qUWdNQ0F1TkRNMkxTNHlMalF6TmkwdU5EUTRkaTA0TGpBMFl6QXRNeTQwTlRjdE1TNDBNRE10TkM0M05ESXROUzR4TnpVdE5DNDNOREo2SWk4K1BIQmhkR2dnWkQwaVRUWTVMakk0SURFMUxqY3hOR010TVM0MU9UZ3RMalF5TXkweExqVTVPQzB1TkRRdE1TNDFPVGd0TVM0ek5DQXdMUzQyTURRdU1EWXRMamc1TkNBeExqTTNOUzB1T0RrMExqa3dNaUF3SURJdU1qTXlMakUyTWlBekxqQTROaTR6TVRJdU1URTRMakF5TGpJek9DMHVNREV1TXpNMExTNHdPREl1TURrMUxTNHdOek11TVRVNExTNHhPRE11TVRjeUxTNHpNRFJzTGpJME1pMHlMakF4TkdNdU1ESTNMUzR5TWpjdExqRXhOaTB1TkRRdExqTXpOQzB1TkRrdExqazRPQzB1TWpNM0xUSXVNell5TFM0ek9TMHpMalV0TGpNNUxUTXVPVFlnTUMwMExqYzNJREV1TlRNMExUUXVOemNnTXk0NE16WWdNQ0F5TGpVek1pNDBOVGNnTXk0ek9ETWdNeTQwT1NBMExqRTBJRElnTGpRNU5TQXlJQzQ0TmlBeUlERXVORGNnTUNBdU56azRMUzR3TmpnZ01TNHdOelF0TVM0ek56WWdNUzR3TnpRdE1TNHdOVE1nTUMweUxqSTNMUzR4TmpndE15NHpORE10TGpRMk1pMHVNVEl0TGpBek1pMHVNalEwTFM0d01USXRMak0wTnk0d05UVXRMakV3TXk0d05qWXRMakUzTXk0eE56UXRMakU1TlM0eU9UZHNMUzR6TkNBeExqa3hZeTB1TURRdU1qSXlMakE0Tmk0ME16Z3VNamswTGpVd055QXhMakUzTGpNNE9DQXlMamcwTnk0Mk5pQTBMakE0TGpZMklETXVPRE0xSURBZ05DNDJNaTB4TGpZME55QTBMall5TFRRdU1USWdNQzB5TGpjekxTNDBOekl0TXk0eU16Y3RNeTQ0T1RJdE5DNHhOallpTHo0OGNHRjBhQ0JrUFNKTk56a3VNakkzSURFMUxqY3hOR010TVM0MU9UY3RMalF5TXkweExqVTVOeTB1TkRRdE1TNDFPVGN0TVM0ek5DQXdMUzQyTURRdU1EVTRMUzQ0T1RRZ01TNHpOelF0TGpnNU5DNDVNRElnTUNBeUxqSXpNaTR4TmpJZ015NHdPRGN1TXpFeUxqRXhPQzR3TWk0eU5DMHVNREV1TXpNMExTNHdPREl1TURrMkxTNHdOek11TVRVNExTNHhPRE11TVRjekxTNHpNRFJzTGpJME1pMHlMakF4TkdNdU1ESTNMUzR5TWpjdExqRXhOeTB1TkRRdExqTXpOQzB1TkRrdExqazRPQzB1TWpNM0xUSXVNell6TFM0ek9TMHpMalV3TWkwdU16a3RNeTQ1TmlBd0xUUXVOemNnTVM0MU16UXROQzQzTnlBekxqZ3pOaUF3SURJdU5UTXlMalExT0NBekxqTTRNeUF6TGpRNU15QTBMakUwSURFdU9UazNMalE1TlNBeExqazVOeTQ0TmlBeExqazVOeUF4TGpRM0lEQWdMamM1T0MwdU1EWTJJREV1TURjMExURXVNemMwSURFdU1EYzBMVEV1TURVeklEQXRNaTR5TnpJdExqRTJPQzB6TGpNME5DMHVORFl5TFM0eE1UY3RMakF6TWkwdU1qUXpMUzR3TVRJdExqTTBOUzR3TlRVdExqRXdNaTR3TmpZdExqRTNNeTR4TnpRdExqRTVOUzR5T1Rkc0xTNHpOQ0F4TGpreFl5MHVNRFF1TWpJeUxqQTROaTQwTXpndU1qazBMalV3TnlBeExqRTJPQzR6T0RnZ01pNDRORGN1TmpZZ05DNHdPQzQyTmlBekxqZ3pOQ0F3SURRdU5qSXRNUzQyTkRjZ05DNDJNaTAwTGpFeUlEQXRNaTQzTXkwdU5EY3pMVE11TWpNM0xUTXVPRGt6TFRRdU1UWTJJaTgrUEhCaGRHZ2daRDBpVFRnM0xqVTJJRFV1T0RFNGFDMHlMalUzTm1NdExqSTBJREF0TGpRek5pNHlMUzQwTXpZdU5EUTNWamd1Tm1Nd0lDNHlORGd1TVRrMkxqUTBPQzQwTXpZdU5EUTRhREl1TlRjMVl5NHlOQ0F3SUM0ME16VXRMakl1TkRNMUxTNDBORGRXTmk0eU5qWmpNQzB1TWpRM0xTNHhPVFl0TGpRME55MHVORE0yTFM0ME5EY2lMejQ4Y0dGMGFDQmtQU0pOT0RjdU5UWWdNVEF1Tnpkb0xUSXVOVGMyWXkwdU1qUWdNQzB1TkRNMkxqSXRMalF6Tmk0ME5EaDJNVEl1TURjMll6QWdMakkwT0M0eE9UWXVORFE0TGpRek5pNDBORGhvTWk0MU56VmpMakkwSURBZ0xqUXpOUzB1TWk0ME16VXRMalEwT0ZZeE1TNHlNVGhqTUMwdU1qUTNMUzR4T1RZdExqUTBOeTB1TkRNMkxTNDBORGNpTHo0OGNHRjBhQ0JrUFNKTk9UVXVPVGNnTVRndU9UZzJkakV1TlRVMll5MHVOREkyTGpJek15MHhMakl1TlRZNExUSXVNVE11TlRZNExTNDRNRElnTUMweExqQTBOeTB1TWpVdE1TNHdORGN0TVM0d056VWdNQzB1T0M0eE5USXRNUzR3TlNBeExqQTVPQzB4TGpBMWFESXVNRGg2YlMweExqY3lOeTA0TGpRM05HTXRNUzR6TURNZ01DMHlMamc1TGpJeExUUXVNRFF1TlRNNExTNHlNVFV1TURZdExqTTFMakkzTnkwdU16RTFMalV3TW13dU16QXlJREV1T1RFNFl5NHdNaTR4TWk0d09EUXVNakkyTGpFNExqSTVOaTR3T1RjdU1EY3VNakUzTGpBNU5TNHpNek11TURjeUlERXVNRGN0TGpJeE5DQXlMakUzTmkwdU16TXlJRE11TVRFeUxTNHpNeklnTVM0NE5UZ2dNQ0F5TGpFMU5TNDBNRE1nTWk0eE5UVWdNUzQyT1RWMk1TNHhNamhvTFRJdU56WmpMVEl1TmpNM0lEQXRNeTQzTmpJZ01TNHhNVFl0TXk0M05qSWdNeTQzTXpNZ01DQXlMalV3TkNBeExqSXpOQ0F6TGprMElETXVNemcxSURNdU9UUWdNUzR5TkRRZ01DQXlMalE1TFM0ek5UUWdNeTQxTXpndE1TNHdNRE5zTGpFeExqUXhOV011TURVekxqRTVOUzR5TWpVdU16TXVOREl1TXpOb01pNHdPR011TWpRZ01DQXVORE0zTFM0eUxqUXpOeTB1TkRRNGRpMDRMakEwWXpBdE15NDBOVGN0TVM0ME1ETXROQzQzTkRJdE5TNHhOelF0TkM0M05ESjZJaTgrUEhCaGRHZ2daRDBpVFRFd09DNDVNemdnTVRBdU5URXlZeTB4TGpNMk5DQXdMVE11TWpJekxqUTRNeTAwTGpjNU15QXhMakkwYkMwdU1UZzRMUzQyTm1NdExqQTFOQzB1TVRrdExqSXlOUzB1TXpJdExqUXhPQzB1TXpKb0xURXVPVEE0WXkwdU1qUWdNQzB1TkRNMkxqSXRMalF6Tmk0ME5EWjJNVEl1TURjMll6QWdMakkwT0M0eE9UWXVORFE0TGpRek5pNDBORGhvTWk0MU56VmpMakkwSURBZ0xqUXpOaTB1TWk0ME16WXRMalEwT0ZZeE5DNDVNMk11T1RJM0xTNDBPRFFnTWk0eU15MHVPVGcwSURNdU1ERXRMams0TkM0MU9DQXdJQzQzT1RZdU1qSXVOemsyTGpneE5uWTRMalV6TW1Nd0lDNHlORGd1TVRrMUxqUTBPQzQwTXpVdU5EUTRhREl1TlRjMVl5NHlOQ0F3SUM0ME16VXRMakl1TkRNMUxTNDBORGgyTFRndU9EWTRZekF0TWk0MU9UY3RMams1TkMwekxqa3hOQzB5TGprMU55MHpMamt4TkNJdlBqd3ZaejQ4TDJjK1BDOXpkbWMrKSBjZW50ZXIgYm90dG9tIG5vLXJlcGVhdDsKICAgIGJhY2tncm91bmQtc2l6ZTogMTE0cHggMjRweAp9CgojZm9vdGVyLWxvZ28gewogICAgYmFja2dyb3VuZDogI2Y1ZjVmNTsgLyogc2NyZWVuIG91dCB0aGUgYmFja2dyb3VuZCBpbWFnZSBvbiB0aGUgZm9vdGVyIHdoZW4gdGhlIGxvZ28gaXMgcHJlc2VudCwgc28gaXQgZG9lc24ndCBtZXNzIHVwIHRyYW5zcGFyZW50IGFyZWFzICovCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICBib3R0b206IC0yMXB4OyAvKiBtYXJnaW4gcGx1cyAxIHB4IHRvIHR3ZWFrIGZvciBpbWFnZSAqLwp9CgojZm9vdGVyLWxvZ28gYSB7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIGhlaWdodDogMjRweDsgLyogbWF0Y2ggaW1hZ2UgaGVpZ2h0ICovCiAgICBtYXJnaW46IDAgYXV0bzsKICAgIHRleHQtYWxpZ246IGxlZnQ7CiAgICB0ZXh0LWluZGVudDogLTk5OTllbTsKICAgIHdpZHRoOiAxMTRweDsgLyogbWF0Y2ggaW1hZ2Ugd2lkdGggKi8KfQojZm9vdGVyLWxvZ28gYTpmb2N1cywKI2Zvb3Rlci1sb2dvIGE6aG92ZXIsCiNmb290ZXItbG9nbyBhOmFjdGl2ZSB7CiAgICBiYWNrZ3JvdW5kOiB1cmwoZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQSE4yWnlCM2FXUjBhRDBpTVRFMElpQm9aV2xuYUhROUlqSTBJaUIyYVdWM1FtOTRQU0l3SURBZ01URTBJREkwSWlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpUGp4blBqeG5JR1pwYkd3OUlpTTFRa0UxUTBVaVBqeHdZWFJvSUdROUlrMHlOeTR5TURZdU1qWTFZeTB1TVRFeUxTNHhOVFF0TGpJNU1pMHVNalEzTFM0ME9DMHVNalEzTFM0d09UY2dNQzB1TVRreUxqQXlOUzB1TWpjMkxqQTNNaTB6TGpVeE55QXhMamszTmkwM0xqVTVOQ0F6TGpBeUxURXhMamM1SURNdU1ESXlMVFF1TVRrMklEQXRPQzR5TnpJdE1TNHdORFl0TVRFdU56a3RNeTR3TWkwdU1EZ3pMUzR3TlMwdU1UYzRMUzR3TnpRdExqSTNOUzB1TURjMExTNHhPRGdnTUMwdU16WTRMakE1TXkwdU5EZ3VNalEzTFM0eE5qWXVNakkzTFM0eE55NDJNRGd1TVRFeUxqZ3pOU0F4TGpjMklERXVNelE0SURNdU56QXpJREl1TkNBMUxqYzNJRE11TVRJZ01pNHhORFF1TnpRMklEUXVNemcySURFdU1USTFJRFl1TmpZeklERXVNVEkySURJdU1qYzRJREFnTkM0MU1pMHVNemdnTmk0Mk5qTXRNUzR4TWpZZ01pNHdOamd0TGpjeUlEUXVNREV0TVM0M056SWdOUzQzTnpNdE15NHhNaTR5T0MwdU1qSTNMakkzTmkwdU5qQTRMakV4TFM0NE16VWlMejQ4Y0dGMGFDQmtQU0pOTVRRdU5qWXpJRGN1TXpNMll5NDVJREFnTVM0ME1pMHVNRFUxSURFdU5qQTBMUzR3TlRVdU1qSXlJREFnTGpRek5DNHhPRGd1TkRNMExqUTFJREFnTGpBM05TMHVNREUyTGpFekxTNHdNelF1TVRjNExTNHhNaTR6TWpjdExqWTJNeUF4TGpVd05DMHhMalkzTkNBeUxqVXhOQzB1TVRFMExqRXhNeTB1TWpReUxqRXpOUzB1TXpNdU1UTTFhQzB1TURBeVl5MHVNRGc0SURBdExqSXhOeTB1TURJeUxTNHpNeTB1TVRNMUxURXVNREV5TFRFdU1ERXRNUzQxTlRZdE1pNHhPRGN0TVM0Mk56VXRNaTQxTVRRdExqQXhPQzB1TURRNExTNHdNelV0TGpFd015MHVNRE0xTFM0eE9DQXdMUzR5Tmk0eU1USXRMalEwTnk0ME16UXRMalEwTnk0eE9ETWdNQ0F1TnpBMUxqQTFOaUF4TGpZd015NHdOVFpvTGpBd05pSXZQanh3WVhSb0lHUTlJazB5TXk0eE5qUWdOUzQ0T1RSakxTNHdPRFF0TGpBMk5pMHVNVGcwTFM0eExTNHlPRFl0TGpFdExqQTFOeUF3TFM0eE1UUXVNREV0TGpFM0xqQXpNaTB4TGpBeE9DNDBMVEl1TURVekxqY3dOQzB5TGprNU9DNDVNeTB1TVRreUxqQTBOaTB1TXpRNExqRTVNeTB1TkRFekxqTTNMUzQyT0RnZ01TNDVNelV0TWk0ME5EWWdNeTQzTnpjdE5DNHlPU0ExTGpjd09DMHVNRGMwTGpBM01pMHVNVGM0TGpFMk55MHVNelEyTGpFMk55MHVNVFk0SURBdExqSTNMUzR3T1MwdU16UTJMUzR4TmpZdE1TNDRORFF0TVM0NU15MHpMall0TXk0M05qY3ROQzR5T1MwMUxqY3dNaTB1TURZMExTNHhOell0TGpJeUxTNHpNak10TGpReE15MHVNemN0TGprME5DMHVNakkxTFRFdU9UZ3lMUzQxTkMwekxTNDVOQzB1TURVMExTNHdNaTB1TVRFdExqQXpMUzR4TmpndExqQXpMUzR4TURJZ01DMHVNaTR3TXpJdExqSTROUzR3T1RndExqRXpMakV3TWkwdU1UazRMakkyT0MwdU1UZ3pMalF5Tnk0eE5UWWdNUzQyTVM0M056WWdNeTR4T0RNZ01TNDRPVFFnTkM0NE15QXhMakExSURFdU5UVWdNaTQwTWpJZ01pNDVPRFlnTXk0M05EY2dOQzR6TnpNZ01pNDBORE1nTWk0MU5UY2dOQzQzTlNBMExqazNNaUEwTGprMU1pQTNMamMzTWk0d01UZ3VNalV5TGpJeU15NDBORGd1TkRjdU5EUTRhREl1T0RkakxqRXpJREFnTGpJMU1pMHVNRFUxTGpNME1pMHVNVFV1TURnM0xTNHdPVGN1TVRNMExTNHlNall1TVRJNExTNHpOVGd0TGpBNUxURXVPRGN5TFM0M056Y3RNeTQzTkRjdE1pNHdPVGd0TlM0M015MHVNamMzTFM0ME1UY3RMalUzTkMwdU9ESXlMUzQ0T0RRdE1TNHlNVGd0TGpFeU5pMHVNVFl0TGpBM05DMHVNell1TURJekxTNDBOakpzTGpJNE5pMHVNekF5WXpFdU16STJMVEV1TXpnM0lESXVOamsyTFRJdU9ESXlJRE11TnpRNExUUXVNemN5SURFdU1URTRMVEV1TmpRNElERXVOek0zTFRNdU1qRXlJREV1T0RrekxUUXVPREl1TURFMkxTNHhOak10TGpBMU5pMHVNek0xTFM0eE9ETXRMalF6TkNJdlBqeHdZWFJvSUdROUlrMHhNUzQxT0RJZ01UY3VOams0WXkwdU1EWTRMUzR3TnpJdExqRTJPQzB1TVRRM0xTNHpNelV0TGpFME55MHVNakUwSURBdExqTTBMakUxTXkwdU16a3VNakk0TFRFdU1qQTJJREV1T0RnMUxURXVPRE1nTXk0Mk5qUXRNUzQ1TVRZZ05TNDBOVEl0TGpBd05TNHhNekl1TURReUxqSTJNeTR4TXk0ek5pNHdPUzR3T1RVdU1qRTFMakUxTGpNME5DNHhOV2d5TGpnMk5XTXVNalExSURBZ0xqUTFNeTB1TVRrNExqUTNMUzQwTlM0d05qTXRMamcyTWk0ek1qVXRNUzQzTWpZdU9DMHlMall6TXk0eE5qVXRMak14TkM0d016Y3RMall4TFM0d05UZ3RMamN6TlMwdU5EY3lMUzQyTXkweExqQTFMVEV1TXpBeUxURXVPVEV0TWk0eU1qUWlMejQ4TDJjK1BHY2dabWxzYkQwaUl6STNORGszTUNJK1BIQmhkR2dnWkQwaVRUTTBMakEzSURZdU5EVTNZeTB1TURVM0xTNHhPRFl0TGpJeU5TMHVNekV6TFM0ME1UVXRMak14TTJndE5DNHdOamhqTFM0eE9TQXdMUzR6TlRndU1USTNMUzQwTVRVdU16RXpUREkwTGpBMElESXpMakUyWXkwdU1EUXVNVE0yTFM0d01UZ3VNamcwTGpBMk5TNDBMakE0TWk0eE1UUXVNakV5TGpFNE1pNHpOUzR4T0RKb01pNDRZeTR4T1RRZ01DQXVNelkwTFM0eE15NDBNaTB1TXpKc015NDFNek10TVRJdU1qZzFjeTR3T1RJdExqTXdOeTQwTVRJdExqTXdOMk11TXpJMklEQWdMalF3TlM0ek1pNDBNRFV1TXpKc01TNDJOQ0ExTGpneU5FZ3pNUzQwTm1NdExqRTVOU0F3TFM0ek5qY3VNVE16TFM0ME1pNHpNalpzTFM0Mk16SWdNaTR6TURkakxTNHdNemN1TVRNMUxTNHdNUzR5T0M0d056TXVNemt1TURneUxqRXhNaTR5TVM0eE56Z3VNelEzTGpFM09HZ3pMamMxYkM0NU9TQXpMakkxTTJNdU1EVTFMakU0Tmk0eU1qUXVNekUwTGpReE5TNHpNVFJvTWk0NFl5NHhOQ0F3SUM0eU55MHVNRFk0TGpNMU15MHVNVGd6TGpBNE1pMHVNVEUyTGpFd05TMHVNalkwTGpBMk5DMHVORXd6TkM0d055QTJMalExTnlJdlBqeHdZWFJvSUdROUlrMDBOaTR5TnlBeU1TNHhOamhqTFM0d01pMHVNVEkxTFM0d09EY3RMakl6TmkwdU1Ua3RMak13TmkwdU1UQXlMUzR3TnkwdU1qSTNMUzR3T1RJdExqTTBOeTB1TURZeUxTNDBOVFF1TVRFMkxTNDRPUzR4T0MweExqSXlOaTR4T0MwdU5qTTNJREF0TGpreUxTNHlPRE10TGpreUxTNDVNbll0Tmk0MGFESXVOV011TWpRZ01DQXVORE0xTFM0eUxqUXpOUzB1TkRRMmRpMHhMams1Tm1Nd0xTNHlORGN0TGpFNU5TMHVORFEzTFM0ME16WXRMalEwTjJndE1pNDFWamN1Tmpsak1DMHVNVE10TGpBMU5TMHVNalV6TFM0eE5TMHVNek00TFM0d09UVXRMakE0TlMwdU1qSXlMUzR4TWpRdExqTTBOaTB1TVRBMmJDMHlMalUzTkM0ek5qaGpMUzR5TVRZdU1ETXRMak0zTmk0eU1pMHVNemMyTGpRME0zWXlMamN4TkdndE1TNDBNREpqTFM0eU5DQXdMUzQwTXpZdU1pMHVORE0yTGpRME9IWXhMams1Tm1Nd0lDNHlORGN1TVRrMUxqUTBOeTQwTXpZdU5EUTNhREV1TkRBeWRqWXVPREUwWXpBZ01pNHpOQ0F4TGpFNU9DQXpMalV5TmlBekxqVTJJRE11TlRJMkxqWTNOQ0F3SURFdU9ERTJMUzR4TmlBeUxqVTJNeTB1TkRJMUxqRTVPQzB1TURjdU16SXRMakkzTnk0eU9EZ3RMalE1YkMwdU1qZ3RNUzQ1TVRjaUx6NDhjR0YwYUNCa1BTSk5OVEV1TURNMklEVXVPREU0U0RRNExqUTJZeTB1TWpRZ01DMHVORE0xTGpJdExqUXpOUzQwTkRoMk1UY3VNREk0WXpBZ0xqSTBPQzR4T1RZdU5EUTRMalF6Tmk0ME5EaG9NaTQxTnpaakxqSTBJREFnTGpRek5TMHVNaTQwTXpVdExqUTBPRlkyTGpJMk5tTXdMUzR5TkRndExqRTVOQzB1TkRRNExTNDBNelF0TGpRME9DSXZQanh3WVhSb0lHUTlJazAxT1M0ek9ETWdNVGd1T1RnMmRqRXVOVFUyWXkwdU5ESTNMakl6TXkweExqSXVOVFk0TFRJdU1UTXVOVFk0TFM0NE1ETWdNQzB4TGpBME55MHVNalV0TVM0d05EY3RNUzR3TnpVZ01DMHVPQzR4TlMweExqQTFJREV1TURrM0xURXVNRFZvTWk0d09IcHRMVEV1TnpJNExUZ3VORGMwWXkweExqTXdNeUF3TFRJdU9Ea3VNakV0TkM0d05DNDFNemd0TGpJeE5TNHdOaTB1TXpVdU1qYzNMUzR6TVRRdU5UQXliQzR6TURJZ01TNDVNVGhqTGpBeUxqRXlMakE0TkM0eU1qWXVNVGd1TWprMkxqQTVOeTR3Tnk0eU1UY3VNRGsxTGpNek5DNHdOeklnTVM0d055MHVNakUwSURJdU1UYzFMUzR6TXpJZ015NHhNUzB1TXpNeUlERXVPRFlnTUNBeUxqRTFOeTQwTURNZ01pNHhOVGNnTVM0Mk9UVjJNUzR4TWpob0xUSXVOelpqTFRJdU5qTTNJREF0TXk0M05qTWdNUzR4TVRZdE15NDNOak1nTXk0M016TWdNQ0F5TGpVd05DQXhMakl6TkNBekxqazBJRE11TXpnMUlETXVPVFFnTVM0eU5EVWdNQ0F5TGpRNUxTNHpOVFFnTXk0MU16Z3RNUzR3TUROc0xqRXhMalF4TldNdU1EVXlMakU1TlM0eU1qUXVNek11TkRJdU16Tm9NaTR3T0dNdU1qUWdNQ0F1TkRNMkxTNHlMalF6TmkwdU5EUTRkaTA0TGpBMFl6QXRNeTQwTlRjdE1TNDBNRE10TkM0M05ESXROUzR4TnpVdE5DNDNOREo2SWk4K1BIQmhkR2dnWkQwaVRUWTVMakk0SURFMUxqY3hOR010TVM0MU9UZ3RMalF5TXkweExqVTVPQzB1TkRRdE1TNDFPVGd0TVM0ek5DQXdMUzQyTURRdU1EWXRMamc1TkNBeExqTTNOUzB1T0RrMExqa3dNaUF3SURJdU1qTXlMakUyTWlBekxqQTROaTR6TVRJdU1URTRMakF5TGpJek9DMHVNREV1TXpNMExTNHdPREl1TURrMUxTNHdOek11TVRVNExTNHhPRE11TVRjeUxTNHpNRFJzTGpJME1pMHlMakF4TkdNdU1ESTNMUzR5TWpjdExqRXhOaTB1TkRRdExqTXpOQzB1TkRrdExqazRPQzB1TWpNM0xUSXVNell5TFM0ek9TMHpMalV0TGpNNUxUTXVPVFlnTUMwMExqYzNJREV1TlRNMExUUXVOemNnTXk0NE16WWdNQ0F5TGpVek1pNDBOVGNnTXk0ek9ETWdNeTQwT1NBMExqRTBJRElnTGpRNU5TQXlJQzQ0TmlBeUlERXVORGNnTUNBdU56azRMUzR3TmpnZ01TNHdOelF0TVM0ek56WWdNUzR3TnpRdE1TNHdOVE1nTUMweUxqSTNMUzR4TmpndE15NHpORE10TGpRMk1pMHVNVEl0TGpBek1pMHVNalEwTFM0d01USXRMak0wTnk0d05UVXRMakV3TXk0d05qWXRMakUzTXk0eE56UXRMakU1TlM0eU9UZHNMUzR6TkNBeExqa3hZeTB1TURRdU1qSXlMakE0Tmk0ME16Z3VNamswTGpVd055QXhMakUzTGpNNE9DQXlMamcwTnk0Mk5pQTBMakE0TGpZMklETXVPRE0xSURBZ05DNDJNaTB4TGpZME55QTBMall5TFRRdU1USWdNQzB5TGpjekxTNDBOekl0TXk0eU16Y3RNeTQ0T1RJdE5DNHhOallpTHo0OGNHRjBhQ0JrUFNKTk56a3VNakkzSURFMUxqY3hOR010TVM0MU9UY3RMalF5TXkweExqVTVOeTB1TkRRdE1TNDFPVGN0TVM0ek5DQXdMUzQyTURRdU1EVTRMUzQ0T1RRZ01TNHpOelF0TGpnNU5DNDVNRElnTUNBeUxqSXpNaTR4TmpJZ015NHdPRGN1TXpFeUxqRXhPQzR3TWk0eU5DMHVNREV1TXpNMExTNHdPREl1TURrMkxTNHdOek11TVRVNExTNHhPRE11TVRjekxTNHpNRFJzTGpJME1pMHlMakF4TkdNdU1ESTNMUzR5TWpjdExqRXhOeTB1TkRRdExqTXpOQzB1TkRrdExqazRPQzB1TWpNM0xUSXVNell6TFM0ek9TMHpMalV3TWkwdU16a3RNeTQ1TmlBd0xUUXVOemNnTVM0MU16UXROQzQzTnlBekxqZ3pOaUF3SURJdU5UTXlMalExT0NBekxqTTRNeUF6TGpRNU15QTBMakUwSURFdU9UazNMalE1TlNBeExqazVOeTQ0TmlBeExqazVOeUF4TGpRM0lEQWdMamM1T0MwdU1EWTJJREV1TURjMExURXVNemMwSURFdU1EYzBMVEV1TURVeklEQXRNaTR5TnpJdExqRTJPQzB6TGpNME5DMHVORFl5TFM0eE1UY3RMakF6TWkwdU1qUXpMUzR3TVRJdExqTTBOUzR3TlRVdExqRXdNaTR3TmpZdExqRTNNeTR4TnpRdExqRTVOUzR5T1Rkc0xTNHpOQ0F4TGpreFl5MHVNRFF1TWpJeUxqQTROaTQwTXpndU1qazBMalV3TnlBeExqRTJPQzR6T0RnZ01pNDRORGN1TmpZZ05DNHdPQzQyTmlBekxqZ3pOQ0F3SURRdU5qSXRNUzQyTkRjZ05DNDJNaTAwTGpFeUlEQXRNaTQzTXkwdU5EY3pMVE11TWpNM0xUTXVPRGt6TFRRdU1UWTJJaTgrUEhCaGRHZ2daRDBpVFRnM0xqVTJJRFV1T0RFNGFDMHlMalUzTm1NdExqSTBJREF0TGpRek5pNHlMUzQwTXpZdU5EUTNWamd1Tm1Nd0lDNHlORGd1TVRrMkxqUTBPQzQwTXpZdU5EUTRhREl1TlRjMVl5NHlOQ0F3SUM0ME16VXRMakl1TkRNMUxTNDBORGRXTmk0eU5qWmpNQzB1TWpRM0xTNHhPVFl0TGpRME55MHVORE0yTFM0ME5EY2lMejQ4Y0dGMGFDQmtQU0pOT0RjdU5UWWdNVEF1Tnpkb0xUSXVOVGMyWXkwdU1qUWdNQzB1TkRNMkxqSXRMalF6Tmk0ME5EaDJNVEl1TURjMll6QWdMakkwT0M0eE9UWXVORFE0TGpRek5pNDBORGhvTWk0MU56VmpMakkwSURBZ0xqUXpOUzB1TWk0ME16VXRMalEwT0ZZeE1TNHlNVGhqTUMwdU1qUTNMUzR4T1RZdExqUTBOeTB1TkRNMkxTNDBORGNpTHo0OGNHRjBhQ0JrUFNKTk9UVXVPVGNnTVRndU9UZzJkakV1TlRVMll5MHVOREkyTGpJek15MHhMakl1TlRZNExUSXVNVE11TlRZNExTNDRNRElnTUMweExqQTBOeTB1TWpVdE1TNHdORGN0TVM0d056VWdNQzB1T0M0eE5USXRNUzR3TlNBeExqQTVPQzB4TGpBMWFESXVNRGg2YlMweExqY3lOeTA0TGpRM05HTXRNUzR6TURNZ01DMHlMamc1TGpJeExUUXVNRFF1TlRNNExTNHlNVFV1TURZdExqTTFMakkzTnkwdU16RTFMalV3TW13dU16QXlJREV1T1RFNFl5NHdNaTR4TWk0d09EUXVNakkyTGpFNExqSTVOaTR3T1RjdU1EY3VNakUzTGpBNU5TNHpNek11TURjeUlERXVNRGN0TGpJeE5DQXlMakUzTmkwdU16TXlJRE11TVRFeUxTNHpNeklnTVM0NE5UZ2dNQ0F5TGpFMU5TNDBNRE1nTWk0eE5UVWdNUzQyT1RWMk1TNHhNamhvTFRJdU56WmpMVEl1TmpNM0lEQXRNeTQzTmpJZ01TNHhNVFl0TXk0M05qSWdNeTQzTXpNZ01DQXlMalV3TkNBeExqSXpOQ0F6TGprMElETXVNemcxSURNdU9UUWdNUzR5TkRRZ01DQXlMalE1TFM0ek5UUWdNeTQxTXpndE1TNHdNRE5zTGpFeExqUXhOV011TURVekxqRTVOUzR5TWpVdU16TXVOREl1TXpOb01pNHdPR011TWpRZ01DQXVORE0zTFM0eUxqUXpOeTB1TkRRNGRpMDRMakEwWXpBdE15NDBOVGN0TVM0ME1ETXROQzQzTkRJdE5TNHhOelF0TkM0M05ESjZJaTgrUEhCaGRHZ2daRDBpVFRFd09DNDVNemdnTVRBdU5URXlZeTB4TGpNMk5DQXdMVE11TWpJekxqUTRNeTAwTGpjNU15QXhMakkwYkMwdU1UZzRMUzQyTm1NdExqQTFOQzB1TVRrdExqSXlOUzB1TXpJdExqUXhPQzB1TXpKb0xURXVPVEE0WXkwdU1qUWdNQzB1TkRNMkxqSXRMalF6Tmk0ME5EWjJNVEl1TURjMll6QWdMakkwT0M0eE9UWXVORFE0TGpRek5pNDBORGhvTWk0MU56VmpMakkwSURBZ0xqUXpOaTB1TWk0ME16WXRMalEwT0ZZeE5DNDVNMk11T1RJM0xTNDBPRFFnTWk0eU15MHVPVGcwSURNdU1ERXRMams0TkM0MU9DQXdJQzQzT1RZdU1qSXVOemsyTGpneE5uWTRMalV6TW1Nd0lDNHlORGd1TVRrMUxqUTBPQzQwTXpVdU5EUTRhREl1TlRjMVl5NHlOQ0F3SUM0ME16VXRMakl1TkRNMUxTNDBORGgyTFRndU9EWTRZekF0TWk0MU9UY3RMams1TkMwekxqa3hOQzB5TGprMU55MHpMamt4TkNJdlBqd3ZaejQ4TDJjK1BDOXpkbWMrKTsKICAgIGJhY2tncm91bmQtc2l6ZTogMTE0cHggMjRweAp9CgoKCkBpbXBvcnQgJy4vaW1wb3J0cy9nbG9iYWwnOwoKLyogQVVJIGF2YXRhciBjb21wb25lbnQgKi8KLmF1aS1hdmF0YXIgewogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgIHZlcnRpY2FsLWFsaWduOiB0ZXh0LWJvdHRvbTsKfQouYXVpLWF2YXRhci1pbm5lciB7CiAgICBkaXNwbGF5OiB0YWJsZS1jZWxsOwogICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsKfQouYXVpLWF2YXRhciBpbWcgewogICAgYm9yZGVyLXJhZGl1czogM3B4OwogICAgZGlzcGxheTogYmxvY2s7CiAgICBtYXJnaW46IDAgYXV0bzsKICAgIGhlaWdodDogMTAwJTsKICAgIHdpZHRoOiAxMDAlOwp9CgouYXVpLWF2YXRhci14c21hbGwsCi5hdWktYXZhdGFyLXhzbWFsbCAuYXVpLWF2YXRhci1pbm5lciB7CiAgICBoZWlnaHQ6IDE2cHg7CiAgICB3aWR0aDogMTZweDsKfQouYXVpLWF2YXRhci1zbWFsbCwKLmF1aS1hdmF0YXItc21hbGwgLmF1aS1hdmF0YXItaW5uZXIgewogICAgaGVpZ2h0OiAyNHB4OwogICAgd2lkdGg6IDI0cHg7Cn0KLmF1aS1hdmF0YXItbWVkaXVtLAouYXVpLWF2YXRhci1tZWRpdW0gLmF1aS1hdmF0YXItaW5uZXIgewogICAgaGVpZ2h0OiAzMnB4OwogICAgd2lkdGg6IDMycHg7Cn0KLmF1aS1hdmF0YXItbGFyZ2UsCi5hdWktYXZhdGFyLWxhcmdlIC5hdWktYXZhdGFyLWlubmVyIHsKICAgIGhlaWdodDogNDhweDsKICAgIHdpZHRoOiA0OHB4Owp9Ci5hdWktYXZhdGFyLXhsYXJnZSwKLmF1aS1hdmF0YXIteGxhcmdlIC5hdWktYXZhdGFyLWlubmVyIHsKICAgIGhlaWdodDogNjRweDsKICAgIHdpZHRoOiA2NHB4Owp9Ci5hdWktYXZhdGFyLXh4bGFyZ2UsCi5hdWktYXZhdGFyLXh4bGFyZ2UgLmF1aS1hdmF0YXItaW5uZXIgewogICAgaGVpZ2h0OiA5NnB4OwogICAgd2lkdGg6IDk2cHg7Cn0KLmF1aS1hdmF0YXIteHh4bGFyZ2UsCi5hdWktYXZhdGFyLXh4eGxhcmdlIC5hdWktYXZhdGFyLWlubmVyIHsKICAgIGhlaWdodDogMTI4cHg7CiAgICB3aWR0aDogMTI4cHg7Cn0KCi8qIEZvcmNlcyBsYXJnZXIgaW1hZ2VzIHRvIGRvd25zY2FsZSBpbiBJRTExLiAqLwouYXVpLWF2YXRhci14c21hbGwgLmF1aS1hdmF0YXItaW5uZXIgaW1nIHsKICAgIG1heC1oZWlnaHQ6IDE2cHg7CiAgICBtYXgtd2lkdGg6IDE2cHg7Cn0KLmF1aS1hdmF0YXItc21hbGwgLmF1aS1hdmF0YXItaW5uZXIgaW1nIHsKICAgIG1heC1oZWlnaHQ6IDI0cHg7CiAgICBtYXgtd2lkdGg6IDI0cHg7Cn0KLmF1aS1hdmF0YXItbWVkaXVtIC5hdWktYXZhdGFyLWlubmVyIGltZyB7CiAgICBtYXgtaGVpZ2h0OiAzMnB4OwogICAgbWF4LXdpZHRoOiAzMnB4Owp9Ci5hdWktYXZhdGFyLWxhcmdlIC5hdWktYXZhdGFyLWlubmVyIGltZyB7CiAgICBtYXgtaGVpZ2h0OiA0OHB4OwogICAgbWF4LXdpZHRoOiA0OHB4Owp9Ci5hdWktYXZhdGFyLXhsYXJnZSAuYXVpLWF2YXRhci1pbm5lciBpbWcgewogICAgbWF4LWhlaWdodDogNjRweDsKICAgIG1heC13aWR0aDogNjRweDsKfQouYXVpLWF2YXRhci14eGxhcmdlIC5hdWktYXZhdGFyLWlubmVyIGltZyB7CiAgICBtYXgtaGVpZ2h0OiA5NnB4OwogICAgbWF4LXdpZHRoOiA5NnB4Owp9Ci5hdWktYXZhdGFyLXh4eGxhcmdlIC5hdWktYXZhdGFyLWlubmVyIGltZyB7CiAgICBtYXgtaGVpZ2h0OiAxMjhweDsKICAgIG1heC13aWR0aDogMTI4cHg7Cn0KCi5hdWktYXZhdGFyLXh4bGFyZ2UgaW1nLAouYXVpLWF2YXRhci14eHhsYXJnZSBpbWcgewogICAgYm9yZGVyLXJhZGl1czogNXB4Owp9CgovKiBQcm9qZWN0IGF2YXRhcnMgLSBjaXJjdWxhciBhbmQgZGlmZmVyZW50IHNpemVzICovCi5hdWktYXZhdGFyLXByb2plY3QgewogICAgYmFja2dyb3VuZC1jb2xvcjogQGF1aS1hdmF0YXItcHJvamVjdC1iZy1jb2xvcjsKICAgIGJveC1zaGFkb3c6IDAgMCAwIDFweCBAYXVpLWF2YXRhci1wcm9qZWN0LWJvcmRlci1jb2xvcjsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQouYXVpLWF2YXRhci1wcm9qZWN0LAouYXVpLWF2YXRhci1wcm9qZWN0IGltZyB7CiAgICBib3JkZXItcmFkaXVzOiAxMDAlOwp9Ci5hdWktYXZhdGFyLXByb2plY3QgaW1nIHsKICAgIGhlaWdodDogYXV0bzsKICAgIG1heC1oZWlnaHQ6IDEwMCU7CiAgICBtYXgtd2lkdGg6IDEwMCU7CiAgICB3aWR0aDogYXV0bzsKfQovKiBUaGUgYmVsb3cgc3R5bGUgYWltcyB0byBtaW5pbWlzZSBhbnkgImhhbG8iIGNhdXNlZCBieSB0aGUgYW50aWFsaWFzaW5nIG9mIHRoZSBpbWFnZSAqLwouYXVpLWF2YXRhci1wcm9qZWN0OmJlZm9yZSB7CiAgICBib3JkZXItcmFkaXVzOiAxMDAlOwogICAgYm9yZGVyOiAxcHggc29saWQgQGF1aS1hdmF0YXItcHJvamVjdC1ib3JkZXItY29sb3I7CiAgICBib3R0b206IC0xcHg7CiAgICBjb250ZW50OiAiIjsKICAgIGxlZnQ6IC0xcHg7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICByaWdodDogLTFweDsKICAgIHRvcDogLTFweDsKfQoKCkBpbXBvcnQgJy4vaW1wb3J0cy9nbG9iYWwnOwoKLyoqCiAqIEFVSSBQYWdlIEhlYWRlcgogKi8KCi5hdWktcGFnZS1oZWFkZXItaW5uZXIgewogICAgYm9yZGVyLXNwYWNpbmc6IDA7CiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgZGlzcGxheTogdGFibGU7CiAgICB0YWJsZS1sYXlvdXQ6IGF1dG87CiAgICB3aWR0aDogMTAwJTsKfQoKLmF1aS1wYWdlLWhlYWRlci1pbWFnZSwKLmF1aS1wYWdlLWhlYWRlci1tYWluLAouYXVpLXBhZ2UtaGVhZGVyLWFjdGlvbnMgewogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7CiAgICBtYXJnaW46IDA7CiAgICBwYWRkaW5nOiAwOwogICAgdGV4dC1hbGlnbjogbGVmdDsKICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7Cn0KLyogY29sbGFwc2UgdGhlIGNlbGwgdG8gZml0IGl0cyBjb250ZW50ICovCi5hdWktcGFnZS1oZWFkZXItaW1hZ2UgewogICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKICAgIHdpZHRoOiAxcHg7Cn0KLmF1aS1wYWdlLWhlYWRlci1tYWluIHsKICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7Cn0KLmF1aS1wYWdlLWhlYWRlci1pbWFnZSArIC5hdWktcGFnZS1oZWFkZXItbWFpbiB7CiAgICBwYWRkaW5nLWxlZnQ6IEBhdWktZ3JpZDsKfQouYXVpLXBhZ2UtaGVhZGVyLWFjdGlvbnMgewogICAgcGFkZGluZy1sZWZ0OiAoQGF1aS1ncmlkICogMik7CiAgICB0ZXh0LWFsaWduOiByaWdodDsKICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7Cn0KLmF1aS1wYWdlLWhlYWRlci1tYWluID4gaDEsCi5hdWktcGFnZS1oZWFkZXItbWFpbiA+IGgyLAouYXVpLXBhZ2UtaGVhZGVyLW1haW4gPiBoMywKLmF1aS1wYWdlLWhlYWRlci1tYWluID4gaDQsCi5hdWktcGFnZS1oZWFkZXItbWFpbiA+IGg1LAouYXVpLXBhZ2UtaGVhZGVyLW1haW4gPiBoNiB7CiAgICBtYXJnaW46IDA7Cn0KLmF1aS1wYWdlLWhlYWRlci1hY3Rpb25zID4gLmF1aS1idXR0b25zIHsKICAgIC8qIHNwYWNlcyBvdXQgYnV0dG9uIGdyb3VwcyB3aGVuIHRoZXkgd3JhcCB0byAyIGxpbmVzICovCiAgICBtYXJnaW4tYm90dG9tOiAoQGF1aS1ncmlkIC8gMik7CiAgICBtYXJnaW4tdG9wOiAoQGF1aS1ncmlkIC8gMik7CiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOwogICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKfQovKiBBdmF0YXIgb3ZlcnJpZGVzICovCi5hdWktcGFnZS1oZWFkZXItaW1hZ2UgLmF1aS1hdmF0YXIgewogICAgdmVydGljYWwtYWxpZ246IHRvcDsKfQoKCgoucGFuZWwsCi5hbGVydFBhbmVsLAouaW5mb1BhbmVsIHsKICAgIGNvbG9yOiAjMzMzOwogICAgcGFkZGluZzogMDsKICAgIG1hcmdpbjogMTBweCAwOwogICAgYm9yZGVyOiAxcHggc29saWQgI2RkZDsKICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICBib3JkZXItcmFkaXVzOiAzcHg7Cn0KCi5hbGVydFBhbmVsLCAuaW5mb1BhbmVsLCAucGFuZWxDb250ZW50IHsKICAgIHBhZGRpbmc6IDEwcHg7Cn0KCi5hbGVydFBhbmVsIHsKICAgIGJvcmRlci1jb2xvcjogI2MwMDsKfQoKLmluZm9QYW5lbCB7CiAgICBib3JkZXItY29sb3I6ICM2OWM7Cn0KCi5wYW5lbEhlYWRlciB7CiAgICBwYWRkaW5nOiAxMHB4OwogICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZGQ7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjdmN2Y3Owp9CgovKiBiYXNpYyBwYW5lbCAoYmFzaWNwYW5lbC52bWQpIHN0eWxlICovCi5iYXNpY1BhbmVsQ29udGFpbmVyIHsKICAgIGJvcmRlci13aWR0aDogMXB4OwogICAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICAgIG1hcmdpbi10b3A6IDJweDsKICAgIG1hcmdpbi1ib3R0b206IDhweDsKICAgIHdpZHRoOiAxMDAlOwp9CgouYmFzaWNQYW5lbENvbnRhaW5lcjpmaXJzdC1jaGlsZCB7CiAgICBtYXJnaW4tdG9wOiAwOwp9CgouYmFzaWNQYW5lbFRpdGxlIHsKICAgIHBhZGRpbmc6IDEwcHg7CiAgICBtYXJnaW46IDA7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwOwogICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZGQ7Cn0KCi5iYXNpY1BhbmVsQm9keSB7CiAgICBwYWRkaW5nOiA1cHg7CiAgICBtYXJnaW46IDA7Cn0KCgovKiBQREwgbWFzdGVyLmNzcyAqLwovKiBHZW5lcmljICovCmZpZWxkc2V0IHsKICAgIGJvcmRlcjogbm9uZTsKICAgIG1hcmdpbjogMDsKICAgIHBhZGRpbmc6IDA7Cn0KCi5zbWFsbHRleHQgewogICAgZm9udC1zaXplOiAxMnB4OwogICAgY29sb3I6ICM3MDcwNzA7Cn0KCiN0aXRsZS10ZXh0IHsKICAgIG1hcmdpbjogMDsKICAgIGZvbnQtc2l6ZTogMjhweDsKfQoKI3RpdGxlLXRleHQgYTpob3ZlcnsKICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKfQoKYm9keS5lcnJvci1wYWdlICNtYWluIHsKICAgIHBhZGRpbmctdG9wOiAwOwp9Cgpib2R5LmVycm9yLXBhZ2UgI21haW4taGVhZGVyIHsKICAgIG1hcmdpbjogMCAtMjBweDsKICAgIHBhZGRpbmc6IDIwcHg7CiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2NjYzsKICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7Cn0KCiNtYWluLWhlYWRlciwKI3ByZXZpZXctaGVhZGVyIHsKICAgIG1hcmdpbi1ib3R0b206IDIwcHg7Cn0KLmNvbnRlbnQtdHlwZS1wYWdlICNtYWluICNtYWluLWhlYWRlciwKLmNvbnRlbnQtdHlwZS1ibG9ncG9zdCAjbWFpbiAjbWFpbi1oZWFkZXIgewogICAgbWFyZ2luLXRvcDogLTEwcHg7Cn0KCiNwcmV2aWV3LWhlYWRlciAjdGl0bGUtdGV4dCB7CiAgICBjb2xvcjogIzMzMzsKICAgIG1hcmdpbi10b3A6IDEwcHg7Cn0KCmEgaW1nIHsKICAgIGJvcmRlcjogMDsKfQoKLmhpZGRlbiB7CiAgICBkaXNwbGF5OiBub25lOwp9Ci8qIEVuZCBnZW5lcmljICovCgovKiBNYWluIGJvZHkgKi8KCi8qIGlmIHNwYWNlLWlhIGlzIG9uLCB3ZSB3YW50IHdpZHRoIHRvIGJlIGF1dG8qLwouaWEtc3BsaXR0ZXIgLmF1aS1wYWdlLXBhbmVsIHsKICAgIHdpZHRoOiBhdXRvOwp9Ci8qIGVuZCBtYWluIGJvZHkgKi8KCi8qIEhlYWRlciAqLwojcXVpY2stc2VhcmNoLXN1Ym1pdCB7CiAgICBkaXNwbGF5OiBub25lOwp9CgojcXVpY2stc2VhcmNoIHsKICAgIG1hcmdpbjogMDsKfQoKI3F1aWNrLXNlYXJjaC5xdWljay1zZWFyY2gtbG9hZGluZzphZnRlciB7CiAgICBkaXNwbGF5OiBub25lOwp9CgouYXVpLW5hdi1saW5rIHNwYW4gKyBzcGFuIHsKICAgIG1hcmdpbi1sZWZ0OiA1cHg7Cn0KLyogRW5kIGhlYWRlciAqLwoKLyogR2VuZXJpYyBBZG1pbiBzaWRlYmFyIChvciB2ZXJ0aWNhbCBuYXZpZ2F0aW9uKSAqLwouYXVpLW5hdi12ZXJ0aWNhbCBsaSBhOmxpbmssCi5hdWktbmF2LXZlcnRpY2FsIGxpIGE6Zm9jdXMsCi5hdWktbmF2LXZlcnRpY2FsIGxpIGE6dmlzaXRlZCwKLmF1aS1uYXYtdmVydGljYWwgbGkgYTphY3RpdmUgIHsKICAgIGNvbG9yOiAjNjY2Owp9CgovKiBFbmQgZ2VuZXJpYyBhZG1pbiBzaWRlYmFyL3ZlcnRpY2FsIG5hdiovCgovKiBTcGFjZSBBZG1pbiBzaWRlYmFyICovCi5pbi1wYWdlLW1lbnUgewogIHBhZGRpbmc6IDEwcHg7Cn0KCi5pbi1wYWdlLW1lbnUtY29udGVudCB7CiAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNDQ0M7CiAgICBwYWRkaW5nOiAwIDAgMjBweCAxMHB4Owp9CgovKiBFbmQgU3BhY2UgQWRtaW4gc2lkZWJhciAqLwoKLypHbG9iYWwgbWVzc2FnZXMgYWJvdmUgdGhlIGhlYWRlciovCiNtZXNzYWdlQ29udGFpbmVyIHsKICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsKICAgIG1hcmdpbjogMDsKICAgIHBhZGRpbmc6IDA7Cn0KCiNtZXNzYWdlQ29udGFpbmVyIGxpIHsKICAgIGRpc3BsYXk6IGJsb2NrOwp9CgojbWVzc2FnZUNvbnRhaW5lciAuYXVpLW1lc3NhZ2UgewogICAgbWFyZ2luOiAwOwogICAgYm9yZGVyLXJhZGl1czogMDsKfQovKkVuZCBnbG9iYWwgbWVzc2FnZXMgYWJvdmUgdGhlIGhlYWRlciovCgojYnJlYWRjcnVtYnMgbGkuaGlkZGVuLWNydW1iIHsKICAgIGRpc3BsYXk6IG5vbmU7Cn0KCi8qIE1ldGFkYXRhIHN0dWZmIGp1c3QgYmVsb3cgcGFnZSB0aXRsZSovCi5wYWdlLW1ldGFkYXRhIHVsIHsKICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICBtYXJnaW46IDA7CiAgICBwYWRkaW5nOiAwOwp9CgoucGFnZS1tZXRhZGF0YSB1bCBsaSB7CiAgICBsaXN0LXN0eWxlOiBub25lOwogICAgZmxvYXQ6IGxlZnQ7CiAgICBwYWRkaW5nOiAwIDVweCAwIDA7CiAgICBtYXJnaW46IDA7CiAgICBsaW5lLWhlaWdodDogMS41Owp9CgoucGFnZS1tZXRhZGF0YSB1bCBsaTpmaXJzdC1jaGlsZDpiZWZvcmUgeyAvKiBsZWZ0LW1vc3QgbGlzdCBpdGVtIC0tIG5vIGxlZnQgbWlkZG90ICovCiAgICBkaXNwbGF5OiBub25lOwp9CgoucGFnZS1tZXRhZGF0YSB1bCBsaTpiZWZvcmUgewogICAgY29udGVudDogJ+KAoic7CiAgICBjb2xvcjogIzcwNzA3MDsKICAgIHBhZGRpbmc6IDAgNXB4Owp9CgoucGFnZS1tZXRhZGF0YSB1bCBsaSBpbWcgewogICAgdmVydGljYWwtYWxpZ246IHRleHQtYm90dG9tOwp9CgoucGFnZS1tZXRhZGF0YSB1bCBhLnBhZ2UtdGlueXVybCBzcGFuIHsKICAgIGZsb2F0OiBsZWZ0OwogICAgaGVpZ2h0OiAxNnB4OwogICAgd2lkdGg6IDEwcHg7CiAgICB0ZXh0LWluZGVudDogLTk5OTllbTsKfQoKLnBhZ2UtbWV0YWRhdGEgdWwgYS5hY3Rpb24tdmlldy1hdHRhY2htZW50cyBzcGFuLnBhZ2UtbWV0YWRhdGEtYXR0YWNobWVudHMtY291bnQgewogICAgbWFyZ2luLWxlZnQ6IDNweDsKfQovKiBFbmQgbWV0YWRhdGEgc3R1ZmYqLwoKLyogUGFnZSBjb250ZW50ICovCiNtYWluIHsKICAgIG1hcmdpbjogMDsKICAgIHBhZGRpbmc6IDIwcHg7CiAgICBjbGVhcjogYm90aDsKICAgIG1pbi1oZWlnaHQ6IDYwMHB4Owp9CgovKiBDT05GREVWLTQ4MjUyIFBhZGRpbmcgb24gdGhlIGJsb2cgY29sbGVjdG9yIGFuZCBwYWdlIGNvbGxlY3RvciBwYWdlcyBkaWZmZXIgdG8gY29udGVudCBwYWdlcyAqLwoucGFnZXMtY29sbGVjdG9yLW1vZGUgI21haW4sCi52aWV3LWJsb2dwb3N0cy1tb2RlICNtYWluLAouY29udGVudC10eXBlLXBhZ2UgI21haW4sCi5jb250ZW50LXR5cGUtYmxvZ3Bvc3QgI21haW4gewogICAgcGFkZGluZzogMjBweCA0MHB4Owp9CgovKiBVc2VkIGZvciB0aGVtaW5nIGJhY2tncm91bmQgY292ZXIgaW1hZ2VzIG9ubHkgKi8KI21haW4gLmNvbm5lY3QtdGhlbWUtYmFja2dyb3VuZC1jb3ZlciB7CiAgICBkaXNwbGF5OiBub25lOwp9CgovKiBDU1MgZm9yIHRoZW1lZCBwYWdlICovCiNtYWluLnRoZW1lZCB7CiAgICBwYWRkaW5nOiAwOwogICAgYmFja2dyb3VuZDogbm9uZQp9CgojdGl0bGUtaGVhZGluZyB7CiAgICBtYXJnaW46IDA7CiAgICBwYWRkaW5nOiAwOwp9CiN0aXRsZS10ZXh0IGEgewogICAgY29sb3I6ICMzMzM7Cn0KCi5uYXZCYWNrZ3JvdW5kQm94IHsKICAgIHBhZGRpbmc6IDVweDsKICAgIGZvbnQtc2l6ZTogMjJweDsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwp9Cgouc2ltcGxlLWNvbmZpcm1hdGlvbiA+IGZvcm0gPiAuYnV0dG9ucy1jb250YWluZXIgewogICAgcGFkZGluZy1sZWZ0OiAwOwogICAgbWFyZ2luLXRvcDogMjBweDsKfQoKLyogYXVpLXBhZ2UtbGF5b3V0LmNzcyBtYWtlcyB0aGlzIGNsZWFyLCB3aGljaCBzdHVmZnMgdXAKIHRoZSBtdWx0aS1jb2x1bW4gbGF5b3V0IG9mIHNwYWNlIGFkbWluIHNpZGViYXIgKi8KCiNjb250ZW50IHsKICAgIGNsZWFyOiBub25lICFpbXBvcnRhbnQ7Cn0KCiNjb250ZW50OjpiZWZvcmUgewogICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50Owp9CgovKiBlbmQgYXVpLXBhZ2UtbGF5b3V0LmNzcyBvdmVycmlkZXMgKi8KCi8qRW5kIHBhZ2UgY29udGVudCovCgovKiBQYWdlIGZvb3RlciAqLwoKLmF1aS1sYXlvdXQgI2Zvb3RlciAuZm9vdGVyLWJvZHkgPiB1bCA+IGxpLnByaW50LW9ubHkgewogICAgZGlzcGxheTogbm9uZTsKfQovKiBFbmQgcGFnZSBmb290ZXIgKi8KCiNjb20tYXRsYXNzaWFuLWNvbmZsdWVuY2UgLmhpZGRlbiB7CiAgICBkaXNwbGF5OiBub25lOwp9CgovKiBQcm9ncmVzcyBQYWdlICovCgovKiBUaGlzIGRvZXNuJ3QgYW5kIHNob3VsZG4ndCBiZSBhIHRhYmxlICovCgojc3RhdHVzIHsKICAgIG1hcmdpbjogMTBweCAwOwp9Cgojc3RhdHVzIHRhYmxlIHsKICAgIG1hcmdpbjogMTBweCAwOwp9CgojdGFza1Byb2dyZXNzQmFyIHsKICAgIGJhY2tncm91bmQ6ICNlYmYyZjk7CiAgICAvKiBUaGlzIGJvcmRlciByYWRpdXMgd2lsbCBub3QKICAgICAgIHdvcmsgd2hpbGUgaXQncyBzdGlsbCBhIHRhYmxlICovCiAgICBib3JkZXItcmFkaXVzOiAzcHg7Cn0KCiN0YXNrR3JlZW5CYXIgewogICAgYmFja2dyb3VuZDogIzNiN2ZjNDsKfQoKI3N0YXR1cyAuc21hbGx0ZXh0IHsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgIGNvbG9yOiAjNzA3MDcwOwp9CgojY29udGVudCB7CiAgICAvKiBPdmVycmlkZSBhdWktcGFnZS1sYXlvdXQuY3NzICovCiAgICBwb3NpdGlvbjogc3RhdGljICFpbXBvcnRhbnQ7Cn0KCmhyIHsKICAgIGJvcmRlcjogbm9uZTsKICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjY2NjOwp9CgojYmxvZ2xpc3QgewogICAgZGlzcGxheTogbm9uZTsKfQoKLyogQ2hpbGQgUGFnZXMgc3R5bGluZyAobWFpbmx5IGZvciB0aGUgYmVuZWZpdCBvZiBkb2N0aGVtZSkgKi8KLmNoaWxkcmVuLXNob3ctaGlkZS5pY29uIHsKICAgIGRpc3BsYXk6IG5vbmU7Owp9CgouY2hpbGQtZGlzcGxheSB7CiAgICBwYWRkaW5nOiAycHggMnB4IDJweCAxMnB4OwogICAgZGlzcGxheTogYmxvY2s7Cn0KCi8qCiAqIFBhZ2UgaGlzdG9yeQogKiBUaGlzIGlzIHRoZSBjc3MgZm9yIHRoZSB3YXJuaW5nIGF0IHRoZSB0b3Agb2YgdGhlIHBhZ2Ugd2hlbiB2aWV3aW5nIHRoZSBwYWdlIGhpc3RvcnkKICovCiNwYWdlLWhpc3Rvcnktd2FybmluZyB7CiAgICBtYXJnaW4tYm90dG9tOiAyMHB4Owp9CgoucGFnZS1oaXN0b3J5LXZpZXcgYTpiZWZvcmUgewogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgY29udGVudDogIsK3IjsKICAgIHBhZGRpbmc6IDAgMTBweDsKfQoKLnBhZ2UtaGlzdG9yeS12aWV3IGE6YmVmb3JlOmhvdmVyIHsKICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKfQoKLnBhZ2UtaGlzdG9yeS12aWV3IGE6Zmlyc3QtY2hpbGQ6YmVmb3JlIHsKICAgIGRpc3BsYXk6IG5vbmU7CiAgICBjb250ZW50OiAnJzsKICAgIHBhZGRpbmc6IDA7Cn0KCi52ZXJzaW9uLW5hdmlnYXRpb24tYmxvY2sgewogICAgcGFkZGluZy10b3A6IDEwcHg7Cn0KCi5jdXJyZW50LXZlcnNpb24tbWFyZ2luIHsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgIHBhZGRpbmctbGVmdDogMTBweDsKfQoKLmN1cnJlbnQtdmVyc2lvbi1tYXJnaW46Zmlyc3QtY2hpbGQgewogICAgcGFkZGluZzogMDsKfQovKiBFbmQgcGFnZSBoaXN0b3J5ICovCgovKiBBbHRlcm5hdGl2ZSBwYWdlcyAqLwouYWx0ZXJuYXRpdmUtcGFnZS1saXN0IHsKICAgIGxpc3Qtc3R5bGU6IG5vbmU7CiAgICBwYWRkaW5nLWxlZnQ6IDMwcHg7CiAgICBsaW5lLWhlaWdodDogMjBweDsKfQoKLmFsdGVybmF0aXZlLXBhZ2UtbGlzdCAuZXhjZXJwdCB7CiAgICBtYXJnaW4tbGVmdDogMjBweDsKfQovKiBFbmQgYWx0ZXJuYXRpdmUgcGFnZXMgKi8KCi8qIFBlb3BsZSBkaXJlY3RvcnkqLwoucGFnZS1zZWN0aW9uLAoucGFnZS1ncm91cCB7CiAgICBkaXNwbGF5OiB0YWJsZTsKICAgIG1hcmdpbjogMDsKICAgIHBhZGRpbmc6IDA7CiAgICB3aWR0aDogMTAwJTsKfQoKLnBhZ2Utc2VjdGlvbiAucGFnZS1ncm91cCB7CiAgICBkaXNwbGF5OiB0YWJsZS1yb3c7CiAgICBtYXJnaW46IDA7CiAgICBwYWRkaW5nOiAwOwogICAgd2lkdGg6IDEwMCU7Cn0KCi5wYWdlLWl0ZW0gewogICAgZGlzcGxheTogdGFibGUtY2VsbDsKICAgIG1hcmdpbjogMDsKICAgIG1pbi13aWR0aDogMjU2cHg7IC8qIGdyaWQgbWluaW11bSAqLwogICAgcGFkZGluZzogMCAwIDAgMTZweDsKICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7Cn0KCi8qUGVvcGxlIGRpcmVjdG9yeSovCmJvZHkucGVvcGxlIC5kYXNoYm9hcmQgewogICAgbWFyZ2luLXRvcDogMDsKfQpib2R5LnBlb3BsZSAuZGFzaGJvYXJkLWdyb3VwID4gZGl2IHsKICAgIG1hcmdpbi10b3A6IDA7Cn0KCmJvZHkucGVvcGxlICNtYWluIHsKICAgIHBhZGRpbmc6IDA7Cn0KCmJvZHkucGVvcGxlICNtYWluLWhlYWRlciB7CiAgICBwYWRkaW5nOiAyN3B4IDAgMCA1MHB4OwogICAgbWFyZ2luLWJvdHRvbTogMDsKICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7Cn0KCi5wYWdlY29udGVudC5wZW9wbGUtZGlyZWN0b3J5IHsKICAgIHBhZGRpbmctbGVmdDogMzRweDsKfQoKLnBlb3BsZS1kaXJlY3RvcnkgLmRhc2hib2FyZC1zZWN0aW9uIHsKICAgIGRpc3BsYXk6IHRhYmxlOwogICAgd2lkdGg6IDEwMCU7Cn0KCmJvZHkucGVvcGxlIC5kYXNoYm9hcmQtZ3JvdXAgPiAuYXVpLXBhZ2UtcGFuZWwgewogICAgYm9yZGVyLWJvdHRvbTogMDsKfQoKYm9keS5wZW9wbGUgLmRhc2hib2FyZC1ncm91cCAuYXVpLXBhZ2UtcGFuZWwgLmF1aS1wYWdlLXBhbmVsLW5hdiB7CiAgICBoZWlnaHQ6IDUyM3B4OyAvKiA2MDBweCAoI21haW46bWluLWhlaWdodCkgLSAjbWFpbi1oZWFkZXI6aGVpZ2h0ICovCn0KCmJvZHkucGVvcGxlIC5kYXNoYm9hcmQtZ3JvdXAgLmF1aS1uYXZncm91cC1pbm5lciB7CiAgICBtYXJnaW4tbGVmdDogLTEwcHg7Cn0KCmJvZHkucGVvcGxlIC5hY3RpdmUtdGFiID4gYSB7CiAgICBjb2xvcjogIzMzMzsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwp9CgojcGVvcGxlLXNlYXJjaC10aXRsZS1iYXIgewogICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgIG1hcmdpbi1ib3R0b206IDEwcHg7Cn0KCiNwZW9wbGUtc2VhcmNoLXRpdGxlLWJhciBoMiB7CiAgICBmbG9hdDogbGVmdDsKfQoKYm9keS5wZW9wbGUgI3Blb3BsZS1zZWFyY2ggewogICAgbWFyZ2luLXRvcDogMDsKICAgIHRleHQtYWxpZ246IHJpZ2h0Owp9CgoucGVvcGxlLWRpcmVjdG9yeSAuYXVpLXRhYnMgPiAudGFicy1tZW51IHsKICAgIHBhZGRpbmc6IDAgMzBweDsKfQoKLnBlb3BsZS1kaXJlY3RvcnkgLmdyZXlib3ggewogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgbWFyZ2luOiAwOwp9CgoucGVvcGxlLWRpcmVjdG9yeSAuZ3JleWJveGZpbGxlZCB7CiAgICB3aWR0aDogMTAwJTsKfQoKYm9keS5wZW9wbGUgI3Blb3BsZS1zZWFyY2ggaW5wdXQgewogICAgdmVydGljYWwtYWxpZ246IHRvcDsKfQoKYm9keS5wZW9wbGUgI3Blb3BsZS1zZWFyY2ggLmZpZWxkLWdyb3VwIHsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgIHdpZHRoOiBhdXRvOwogICAgcGFkZGluZzogMCAxMHB4IDAgMDsKICAgIG1hcmdpbjogMDsKfQoKYm9keS5wZW9wbGUgLmF1aS1tZXNzYWdlLmVycm9yIHsKICAgIG1hcmdpbi1ib3R0b206IDEwcHg7Cn0KCmJvZHkucGVvcGxlIC5ncmV5Ym94ICNwZW9wbGVsaXN0IC5wcm9maWxlLW1hY3JvIHsKICAgIG1hcmdpbjogMTBweCA0MHB4IDIwcHggMDsKfQoKI3Blb3BsZS1zZWFyY2ggLmZpZWxkLWdyb3VwIHsKICAgIHBhZGRpbmctbGVmdDogMDsKfQoKYm9keS5wZW9wbGUgLmJsYW5rLWV4cGVyaWVuY2UtcGVvcGxlIHsKICAgIG1hcmdpbi10b3A6IDUwcHg7Cn0KCi5ibGFuay1leHBlcmllbmNlLXBlb3BsZSB7CiAgICBtaW4taGVpZ2h0OiAxMDBweDsKICAgIGJhY2tncm91bmQ6IHVybCguLi8uLi8uLi9pbWFnZXMvaWNvbnMvcGVvcGxlLWVtcHR5LXBsYWNlaG9sZGVyLnBuZykgbm8tcmVwZWF0IHJpZ2h0IGJvdHRvbTsKfQoKLndhdGNoZXMgLnRhYmxldmlldy1hY3Rpb24taWNvbiB7CiAgICB0ZXh0LWFsaWduOiByaWdodDsKfQoKLyogQmxhbmsgZXhwZXJpZW5jZSAqLwouYmxhbmstZXhwZXJpZW5jZS1jb250YWluZXIgewogICAgYm9yZGVyOiAxcHggc29saWQgI0NDQzsKICAgIGJvcmRlci1yYWRpdXM6IDNweDsKICAgIHdpZHRoOiA2NSU7CiAgICBtYXJnaW46IDEwMHB4IGF1dG87CiAgICBwYWRkaW5nOiAzMHB4Owp9CgouYmxhbmstZXhwZXJpZW5jZS1jb250YWluZXIgcCB7CiAgICBjb2xvcjogIzcwNzA3MDsKICAgIGxpbmUtaGVpZ2h0OiAyNHB4OwogICAgZm9udC1zaXplOiAxNnB4OwogICAgd2lkdGg6NzAlOwogICAgbWFyZ2luLXRvcDowOwogICAgbWFyZ2luLWJvdHRvbToyNnB4Owp9CgouYmxhbmstZXhwZXJpZW5jZS1ibG9nIHsKICAgIGJhY2tncm91bmQ6IHVybCgnLi4vLi4vaW1hZ2VzL2ljb25zL2Jsb2ctZW1wdHktcGxhY2Vob2xkZXIucG5nJykgbm8tcmVwZWF0IHJpZ2h0IGJvdHRvbTsKfQouYmxhbmstZXhwZXJpZW5jZS1wYWdlIHsKICAgIGJhY2tncm91bmQ6IHVybCgnLi4vLi4vaW1hZ2VzL2ljb25zL3BhZ2VzLWVtcHR5LXBsYWNlaG9sZGVyLnBuZycpIG5vLXJlcGVhdCByaWdodCBib3R0b207Cn0KCi8qQmxvZyBSb2xlKi8KCi5ibG9nLXBvc3QtbGlzdGluZyB7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICBwYWRkaW5nOiAzMHB4IDIwcHggMjBweCA2OHB4OwogICAgbWFyZ2luLXRvcDogLTEwcHg7Cn0KCiNsaW5rLWJyb3dzZXItdGFiLWl0ZW1zICsgLmJsb2ctcG9zdC1saXN0aW5nIHsKICAgIHBhZGRpbmctdG9wOiAxMHB4Owp9CgojbGluay1icm93c2VyLXRhYi1pdGVtcyArIC5ibG9nLXBvc3QtbGlzdGluZyAubG9nb0Jsb2NrIHsKICAgIHRvcDogMTBweDsKfQoKLmJsb2ctcG9zdC1saXN0aW5nICsgLmJsb2ctcG9zdC1saXN0aW5nIHsKICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjY2NjOwogICAgbWFyZ2luLXRvcDogMDsKfQoKLmxvZ29CbG9jaywKLmJsb2dIZWFkaW5nIHsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKfQoKLnVzZXJMb2dvLAoudXNlckxvZ28tNDggewogICAgd2lkdGg6IDQ4cHg7CiAgICBoZWlnaHQ6IDQ4cHg7CiAgICBib3JkZXItcmFkaXVzOiAzcHg7Cn0KCi51c2VyTG9nby05NiB7CiAgICB3aWR0aDogOTZweDsKICAgIGhlaWdodDogOTZweDsKICAgIGJvcmRlci1yYWRpdXM6IDNweDsKfQoKLnVzZXJMb2dvLTE0NCB7CiAgICB3aWR0aDogMTQ0cHg7CiAgICBoZWlnaHQ6IDE0NHB4OwogICAgYm9yZGVyLXJhZGl1czogM3B4Owp9CgoudXNlckxvZ29MaW5rIHsKICAgIGRpc3BsYXk6IGlubGluZTsKfQoKLnBhZ2UtbWV0YWRhdGEgewogICAgbGluZS1oZWlnaHQ6IDEuMjUgIWltcG9ydGFudDsKfQoKLmxvZ28taGVhZGluZy1ibG9jayB7CiAgICBtYXJnaW4tYm90dG9tOiAyMHB4Owp9CgoKLmxvZ29CbG9jayB7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICBsZWZ0OiAwcHg7CiAgICB0b3A6IDMwcHg7Cn0KCi51c2VyTG9nb0xpbmsgewogICAgbGluZS1oZWlnaHQ6IDMwcHg7Cn0KCiN0aXRsZS1oZWFkaW5nIC51c2VyTG9nb0xpbmsgewogICAgZmxvYXQ6IGxlZnQ7Cn0KCi5sb2dvLWhlYWRpbmctYmxvY2sgLnVzZXJMb2dvIHsKICAgIHdpZHRoOiA0OHB4OwogICAgYm9yZGVyLXJhZGl1czogM3B4OwogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9CgpzcGFuLmJsb2dIZWFkaW5nIHsKICAgIGRpc3BsYXk6IGJsb2NrOwp9CgouYmxvZ0hlYWRpbmcgLnBhZ2UtbWV0YWRhdGEgewogICAgbWFyZ2luOiAwOwogICAgbGluZS1oZWlnaHQ6IDE2cHggIWltcG9ydGFudDsKICAgIG1hcmdpbi10b3A6IDJweDsKICAgIG1hcmdpbi1yaWdodDogMTBweDsKfQoKYS5ibG9nSGVhZGluZyB7CiAgICBmb250LXNpemU6IDI0cHg7Cn0KCi5ibG9nLXBvc3QtbGlzdGluZyA+IC53aWtpLWNvbnRlbnQgewogICAgcGFkZGluZzogMHB4ICFpbXBvcnRhbnQ7Cn0KCgouYmxvZy1wb3N0LWxpc3RpbmcgLmVuZHNlY3Rpb24gewogICAgY2xlYXI6Ym90aDsKICAgIG1hcmdpbi10b3A6IDIwcHg7Cn0KLyogRW5kIGJsb2cgcm9sZSovCgovKiBCbGFuayBleHBlcmllbmNlICovCi5ibGFuay1leHBlcmllbmNlLWNvbnRhaW5lciB7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjQ0NDOwogICAgYm9yZGVyLXJhZGl1czogM3B4OwogICAgd2lkdGg6IDY1JTsKICAgIG1hcmdpbjogMTAwcHggYXV0bzsKICAgIHBhZGRpbmc6IDMwcHg7Cn0KCi5ibGFuay1leHBlcmllbmNlLWNvbnRhaW5lciBwIHsKICAgIGNvbG9yOiAjNzA3MDcwOwogICAgbGluZS1oZWlnaHQ6IDI0cHg7CiAgICBmb250LXNpemU6IDE2cHg7CiAgICB3aWR0aDo3MCU7CiAgICBtYXJnaW4tdG9wOjA7CiAgICBtYXJnaW4tYm90dG9tOjI2cHg7Cn0KCi5ibGFuay1leHBlcmllbmNlLWJsb2cgewogICAgYmFja2dyb3VuZDogdXJsKCcuLi8uLi9pbWFnZXMvaWNvbnMvYmxvZy1lbXB0eS1wbGFjZWhvbGRlci5wbmcnKSBuby1yZXBlYXQgcmlnaHQgYm90dG9tOwp9CgovKiBhbHBoYWJldCBsaXN0ICovCiNzcXVhcmV0YWIgewogICAgbWFyZ2luLWxlZnQ6IDA7CiAgICBwYWRkaW5nLWxlZnQ6IDA7CiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOwogICAgZm9udC1mYW1pbHk6IFZlcmRhbmEsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7CiAgICBmb250LXNpemU6IDE0cHg7CiAgICBsaW5lLWhlaWdodDogMjBweDsKfQoKI3NxdWFyZXRhYiBsaSB7CiAgICBkaXNwbGF5OiBpbmxpbmU7CiAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7Cn0KCiNzcXVhcmV0YWIgYSB7CiAgICBwYWRkaW5nOiA1cHggN3B4IDNweCA3cHg7CiAgICBib3JkZXItd2lkdGg6IDFweDsKICAgIGJvcmRlci1zdHlsZTogc29saWQ7Cn0KCiNzcXVhcmV0YWIgYTpsaW5rLAojc3F1YXJldGFiIGE6dmlzaXRlZCB7CiAgICBjb2xvcjogI2ZmZjsKICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKfQoKI3NxdWFyZXRhYiBhOmhvdmVyIHsKICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKfQoKLmFkbWluLXNpZGViYXItZ3JvdXAgfiAuYWRtaW4tc2lkZWJhci1ncm91cCB7CgltYXJnaW4tdG9wOiAyMHB4Owp9CgovKiBDT05GREVWLTEzNDgyOiBPdmVycmlkZSAuYXVpLXBhZ2UtcGFuZWwgKi8KI21haW4uYXVpLXBhZ2UtcGFuZWwgewoJYm9yZGVyLXRvcDogMDsKfQoKLnJlY2VudGx5LXVwZGF0ZWQtY29uY2lzZSAudXBkYXRlLWl0ZW0gLnVwZGF0ZS1pdGVtLWRlc2MsCi5yZWNlbnRseS11cGRhdGVkLWNvbmNpc2UgLnVwZGF0ZS1pdGVtIC51cGRhdGUtaXRlbS1jaGFuZ2VzewogICAgZm9udC1zaXplOiAxMnB4OwogICAgbWFyZ2luLWxlZnQ6IDVweDsKICAgIGxpbmUtaGVpZ2h0OiAyMHB4Owp9CgovKiBjb25zaXN0ZW50IHBsYWNlaG9sZGVyIHRleHQgY29sb3IgKi8KOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHsK4oCCICBjb2xvcjogIzk5OTsKfQo6LW1vei1wbGFjZWhvbGRlciB7IC8qIEZpcmVmb3ggMTgtICovCuKAgiAgY29sb3I6ICM5OTk74oCCCn0KOjotbW96LXBsYWNlaG9sZGVyIHvigIIgLyogRmlyZWZveCAxOSsgKi8K4oCCICBjb2xvcjogIzk5OTvigIIKfQo6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHvigIIK4oCCICBjb2xvcjogIzk5OTvigIIKfQoKLyogRW5kIFBETCBtYXN0ZXIuY3NzICovCgouZGVmYXVsdC1tYWNyby1zcGlubmVyIHsKICAgIHdpZHRoOiA0MHB4OwogICAgaGVpZ2h0OiA0MHB4OwogICAgcG9zaXRpb246IHJlbGF0aXZlOwp9CgoKLyogcmVtb3ZlIHVud2FudGVkIHRpdGxlIGZyb20gQ29udGVudEJ5TGFiZWwgbWFjcm8gKi8KCi5hdWktaWNvbmZvbnQtcGFnZS1kZWZhdWx0LCAuYXVpLWljb25mb250LXBhZ2UtYmxvZ3Bvc3QgewoKICAgIGRpc3BsYXk6bm9uZTsKCn0KCuKAiwoKLmhpZGRlbiB7CgogICAgZGlzcGxheTpub25lOwoKfQoKCgovKiB3aWtpLWNvbnRlbnQuY3NzICovCgovKioKICogQVVJIE92ZXJyaWRlcwogKiBzZWUgL2luY2x1ZGVzL2Nzcy9hdWktb3ZlcnJpZGVzLmNzcwogKi8KLnJvdW5kZWQtY29ybmVycyAoQHJhZGl1czogNXB4KSB7CiAgLW1vei1ib3JkZXItcmFkaXVzOiBAcmFkaXVzOwogIC13ZWJraXQtYm9yZGVyLXJhZGl1czogQHJhZGl1czsKICBib3JkZXItcmFkaXVzOiBAcmFkaXVzOwp9Cgoud2lraS1jb250ZW50IHsKICAuaGVhZGVyLCAuZm9vdGVyLCAuY2VsbCB7CiAgICBtYXJnaW46IDhweCAwOwogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgIHdvcmQtd3JhcDogYnJlYWstd29yZDsKICAgIC5yb3VuZGVkLWNvcm5lcnM7CiAgfQoKICAuY29sdW1uTGF5b3V0IHsKICAgIGRpc3BsYXk6IHRhYmxlOwogICAgdGFibGUtbGF5b3V0OiBmaXhlZDsKICAgIHdpZHRoOiAxMDAlOwogICAgKmNsZWFyOiBib3RoOwoKICAgIC5jZWxsIHsKICAgICAgdmVydGljYWwtYWxpZ246IHRvcDsKICAgIH0KICAgIC5jZWxsLmFzaWRlIHsKICAgICAgd2lkdGg6IDI5LjklOwogICAgfQogICAgLmNlbGwuc2lkZWJhcnMgewogICAgICB3aWR0aDogMTkuOSU7CiAgICB9CiAgfQoKICAuY2VsbCB7CiAgICAgZGlzcGxheTogdGFibGUtY2VsbDsKICAgICBwYWRkaW5nOiAwIDEwcHg7CiAgfQoKICAuaW5uZXJDZWxsIHsKICAgIG92ZXJmbG93LXg6IGF1dG87CiAgfQoKICAucGxhY2Vob2xkZXIgewogICAgYmFja2dyb3VuZDogI2Y1ZjVmNTsKICAgIGJvcmRlcjogMXB4IGRvdHRlZCAjY2NjOwogICAgY29sb3I6ICM3MDcwNzA7CiAgICBmb250LXN0eWxlOiBpdGFsaWM7CiAgICBtYXJnaW46IDA7CiAgICBwYWRkaW5nOiAxMHB4OwoKICAgIC5hY3RpdmF0aW9uLWNvbnRlbnQgewogICAgICBkaXNwbGF5Om5vbmU7CiAgICB9CiAgICAuZGlzcGxheS1jb250ZW50IHsKICAgICAgZGlzcGxheTogaW5oZXJpdDsKICAgIH0KICB9CgogIGxpID4gdWwsCiAgbGkgPiBvbCwKICB1bCA+IHVsLAogIG9sID4gb2wgewogICAgbWFyZ2luLXRvcDogMDsKICB9CgogIHVsIHsKICAgIGxpc3Qtc3R5bGUtdHlwZTogZGlzYzsKICB9CgogIG9sLAogIG9sIG9sIG9sIG9sLAogIG9sIG9sIG9sIG9sIG9sIG9sIG9sLAogIG9sIG9sIG9sIG9sIG9sIG9sIG9sIG9sIG9sIG9sIHsKICAgIGxpc3Qtc3R5bGUtdHlwZTogZGVjaW1hbDsKICB9CgogIG9sIG9sLAogIG9sIG9sIG9sIG9sIG9sLAogIG9sIG9sIG9sIG9sIG9sIG9sIG9sIG9sLAogIG9sIG9sIG9sIG9sIG9sIG9sIG9sIG9sIG9sIG9sIG9sIHsKICAgIGxpc3Qtc3R5bGUtdHlwZTogbG93ZXItYWxwaGE7CiAgfQoKICBvbCBvbCBvbCwKICBvbCBvbCBvbCBvbCBvbCBvbCwKICBvbCBvbCBvbCBvbCBvbCBvbCBvbCBvbCBvbCwKICBvbCBvbCBvbCBvbCBvbCBvbCBvbCBvbCBvbCBvbCBvbCBvbCB7CiAgICBsaXN0LXN0eWxlLXR5cGU6IGxvd2VyLXJvbWFuOwogIH0KCiAgLyogdGhlc2Ugc3R5bGVzIGFyZSBjb3BpZWQgZnJvbSBhdWktcGFnZS10eXBvZ3JhcGh5LmNzcyBpbiBBVUkgNS40LiBUaGlzIHdpbGwgcmV0YWluIHRoZSBoZWFkaW5nIHN0eWxlcyBmb3IgdXNlcgogICAqIGdlbmVyYXRlZCBjb250ZW50IHdoZW4gdXBncmFkaW5nIHRvIHVzZSBBVUkgNS43IGFuZCBBREcgMi4wLiBUaGlzIGlzIGJyaXR0bGUgYmVjYXVzZSBub3QgZXZlcnkgcHJvcGVydHkgaXMKICAgKiBleHBsaWNpdGx5IGRlY2xhcmVkIGhlcmUuIElmIEFVSSA1Ljggc2V0cyBoMSB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOyBpdCB3aWxsIGJyZWFrIHRoZSBkZWZhdWx0IHN0eWxlcyAqLwogIGgxIHsKICAgIGZvbnQtc2l6ZTogMS43MTRlbTsKICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7CiAgICBsaW5lLWhlaWdodDogMS4xNjY7CiAgfQogIGgyIHsKICAgIGZvbnQtc2l6ZTogMS40M2VtOwogICAgZm9udC13ZWlnaHQ6IG5vcm1hbDsKICAgIGxpbmUtaGVpZ2h0OiAxLjI7CiAgfQogIGgzIHsKICAgIGZvbnQtc2l6ZTogMS4xNDJlbTsKICAgIGxpbmUtaGVpZ2h0OiAxLjU7CiAgfQogIGg0IHsKICAgIGZvbnQtc2l6ZTogMWVtOwogICAgbGluZS1oZWlnaHQ6IDEuNDI4OwogIH0KICBoNSB7CiAgICBmb250LXNpemU6IDAuODU3ZW07CiAgICBsaW5lLWhlaWdodDogMS4zMzM7CiAgfQogIGg2IHsKICAgIGxpbmUtaGVpZ2h0OiAxLjQ1NDsKICAgIGZvbnQtc2l6ZTogMC43ODVlbTsKICB9CiAgaDE6Zmlyc3QtY2hpbGQsCiAgaDI6Zmlyc3QtY2hpbGQsCiAgaDM6Zmlyc3QtY2hpbGQsCiAgaDQ6Zmlyc3QtY2hpbGQsCiAgaDU6Zmlyc3QtY2hpbGQsCiAgaDY6Zmlyc3QtY2hpbGQgewogICAgbWFyZ2luLXRvcDogMDsKICB9CiAgLyogTmljZSBzdHlsZXMgZm9yIHVzaW5nIHN1YmhlYWRpbmdzICovCiAgaDEgKyBoMiwKICBoMiArIGgzLAogIGgzICsgaDQsCiAgaDQgKyBoNSwKICBoNSArIGg2IHsKICAgIG1hcmdpbi10b3A6IDEwcHg7CiAgfQogIC8qIEVuZCBzdHlsZXMgY29waWVkIGZyb20gYXVpLXBhZ2UtdHlwb2dyYXBoeS5jc3MgaW4gQVVJIDUuNCAqLwoKICBoMSArIGgxLAogIGgyICsgaDIsCiAgaDMgKyBoMywKICBoNCArIGg0LAogIGg1ICsgaDUsCiAgaDYgKyBoNiB7CiAgICBtYXJnaW4tdG9wOiAxMHB4OwogIH0KICAvKiBFbmQgQ29uZmx1ZW5jZSBzcGVjaWZpYyB0eXBvZ3JhcGh5IG92ZXJyaWRlcyBvbiB0b3Agb2YgQVVJIDUuNCB0eXBvZ3JhcGh5ICovCgogIC5jb25mbHVlbmNlLWNvbnRlbnQtaW1hZ2UtYm9yZGVyIHsKICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOwogIH0KCiAgZGl2LmVycm9yID4gc3Bhbi5lcnJvciB7CiAgICBjb2xvcjogIzMzMzsKICAgIHBhZGRpbmc6IDZweCAxMHB4OwogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgYmFja2dyb3VuZDogI2ZmZmRmNjsKICAgIGJvcmRlcjogMXB4IHNvbGlkICNmZmVhYWU7CiAgICAucm91bmRlZC1jb3JuZXJzOwogIH0KCi8qIENPTkZERVYtNjEzNyBXZWxjb21lIHRvIHRoZSB3b3JsZCBvZiBicm93c2VyIGhhY2tzCiBXZSdyZSB0YXJnZXRpbmcgSUU4IGNvbXBhdGliaWxpdHkgbW9kZSB3aGljaCBtZWFucyBJRTcKIGhhY2tzLiBUaGlzIHVwZGF0ZXMgdGhlIHBhZ2UtbGF5b3V0IHRvIGJlIGZsb2F0ZWQgcmF0aGVyCiB0aGFuIHRhYmxlIGxheW91dCB3aGljaCBpcyBub3Qgc3VwcG9ydGVkIGluIGNvbXBhdCBtb2RlLgogVGhlc2Ugc3R5bGVzIGFyZSBvbmx5IGFwcGxpZWQgdG8gSUU4IGNvbXBhdCBtb2RlICovCiAgLmNvbHVtbkxheW91dCwKICAuY2VsbCwKICAuaGVhZGVyLAogIC5mb290ZXIgewogICAgKmRpc3BsYXk6IGJsb2NrOwogICAgKmZsb2F0OiBsZWZ0OwogICAgKndpZHRoOiAxMDAlOwogIH0KCiAgLmlubmVyQ2VsbCB7CiAgICAqYm9yZGVyOiAycHggZGFzaGVkICNjY2M7CiAgICAqbWFyZ2luOiA4cHggNHB4OwogICAgKnBhZGRpbmc6IDRweCA4cHg7CiAgfQoKICAvKiBUZXh0IFBsYWNlaG9sZGVycyAqLwogIC50ZXh0LXBsYWNlaG9sZGVyIHsKICAgIGJhY2tncm91bmQ6ICNmNWY1ZjU7CiAgICBjb2xvcjogIzcwNzA3MDsKICAgIGZvbnQtc3R5bGU6IGl0YWxpYzsKICAgIG1pbi13aWR0aDogMTBweDsgLyogU28gdGhhdCBpdCBpcyB2aXNpYmxlIHdoZW4gZW1wdHkgKi8KICAgIGRpc3BsYXk6IGJsb2NrOwogIH0KCiAgLnRleHQtcGxhY2Vob2xkZXIuc2VsZWN0ZWQgewogICAgY29sb3I6ICMzMzMKICB9CgogIC5hdWktbG96ZW5nZSB7CiAgICBwYWRkaW5nOiAzcHggNXB4IDJweCA1cHg7CiAgfQp9CgogIC8qIG5lZWRlZCB0byBtYWtlIHRoZSBoZWFkaW5nIGluIHRoZSBlZGl0b3IgdGhlIHJpZ2h0IGNvbG91ciB3aXRob3V0IG1lc3Npbmcgd2l0aCBmYWJyaWMqLwogICN0aW55bWNlIGg2IHsKICAgIGNvbG9yOiAjNkI3NzhDOwogIH0KICAKLmNvbnRlbnRMYXlvdXQgLmlubmVyQ2VsbCA+ICo6Zmlyc3QtY2hpbGQsCi5jb250ZW50TGF5b3V0MiB7CiAgLmlubmVyQ2VsbCA+ICo6Zmlyc3QtY2hpbGQgewogICAgbWFyZ2luLXRvcDogMDsKICB9Cn0KCi5jb250ZW50TGF5b3V0MiAuY29sdW1uTGF5b3V0IHsKICBtYXJnaW4tYm90dG9tOiA4cHg7Cn0KCgoudmlldyAud2lraS1jb250ZW50IC5jZWxsOmZpcnN0LWNoaWxkLAouY29udGVudC1wcmV2aWV3IC53aWtpLWNvbnRlbnQgLmNlbGw6Zmlyc3QtY2hpbGQgewogIHBhZGRpbmc6IDA7Cn0KCi8qIENPTkYtMjM0OTcgLSBXb3JrIGFyb3VuZCByZW5kZXJpbmcgaXNzdWUgaW4gV2Via2l0IGFuZCBJRTkuIFdvcmtzIGZpbmUgZm9yIElFOCBhbmQgRmlyZWZveC4gKi8KbGlbc3R5bGUqPSd0ZXh0LWFsaWduOiBjZW50ZXInXSwKbGlbc3R5bGUqPSd0ZXh0LWFsaWduOiByaWdodCddIHsKICBsaXN0LXN0eWxlLXBvc2l0aW9uOiBpbnNpZGU7Cn0KCi8qIENPTkZERVYtNzc1NCAtIFdvcmthcm91bmQgZm9yIHNvbWUgdW53YW50ZWQgb25EZW1hbmQgc3R5bGluZy4KICAgUmVtb3ZlIG9uY2UgSlNUREVWLTE3MzAgaXMgZml4ZWQuIFNlZSBDT05GREVWLTc3OTkuCiAgIFdpbGwgaGF2ZSBhIHNpZGUtZWZmZWN0IG9mIGJyZWFraW5nIGFueSBmb290ZXJzIGluIHRoZW1lcyB0aGF0CiAgIGRvIG5vdCB1c2UgdGhlIGRlZmF1bHQgZm9udC1mYW1pbHkgb3IgZm9udC1zaXplLgogICAjbWFpbiBzZWxlY3RvciBpcyB0byBwcmV2ZW50IHRoaXMgcnVsZSBhcHBseWluZyB3aXRoaW4gdGhlIFJURSBpZnJhbWUuCiAgICovCiNtYWluIC53aWtpLWNvbnRlbnQgLmZvb3RlciBwLCAjbWFpbiAud2lraS1jb250ZW50IC5mb290ZXIgYSB7CiAgZm9udC1mYW1pbHk6IGFyaWFsLHNhbnMtc2VyaWY7CiAgZm9udC1zaXplOiAxNHB4Owp9Cgoud2lraS1jb250ZW50IC5jZWxsLAoubWNlQ29udGVudEJvZHkud2lraS1jb250ZW50IC5jZWxsLAoudHdvQ29sdW1ucyAuY2VsbCwKLnRocmVlQ29sdW1ucyAuY2VsbCwKLnR3b0NvbHVtbnMgLmxhcmdlLAoubWNlQ29udGVudEJvZHkud2lraS1jb250ZW50IC5oZWFkZXIsCi5tY2VDb250ZW50Qm9keS53aWtpLWNvbnRlbnQgLmZvb3RlciwKLnRocmVlQ29sdW1ucyAubGFyZ2UgewogICpib3JkZXI6IDA7CiAgKm1hcmdpbjogMDsKICAqcGFkZGluZzogMDsKICAqb3ZlcmZsb3c6IGhpZGRlbjsKfQoKLnR3b0NvbHVtbnMgLmNlbGwgewogICp3aWR0aDogNDkuOSU7Cn0KCi50aHJlZUNvbHVtbnMgLmNlbGwgewogICp3aWR0aDogMzMuMyU7Cn0KCi50d29Db2x1bW5zIC5sYXJnZSB7CiAgKndpZHRoOiA2OS45JTsKfQoKLnRocmVlQ29sdW1ucyAubGFyZ2UgewogICp3aWR0aDogNTkuOSU7Cn0KCmRpdi5hc2lkZSArIGRpdi5sYXJnZSwKZGl2LmxhcmdlICsgZGl2LmFzaWRlLApkaXYubGFyZ2UgKyBkaXYuc2lkZWJhcnMsCi50d29Db2x1bW5zIGRpdi5jZWxsICsgZGl2LmNlbGwsCi50aHJlZUNvbHVtbnMgZGl2LmNlbGwgKyBkaXYuY2VsbCArIGRpdi5jZWxsIHsKICAqZmxvYXQ6IHJpZ2h0Owp9CgovKiBQYWdlIExheW91dHMgMiAqLwovKiBTZWN0aW9uIHR5cGVzOiBzaW5nbGUsIHR3by1lcXVhbCwgdHdvLWxlZnQtc2lkZWJhciwgdHdvLXJpZ2h0LXNpZGViYXIsIHRocmVlLWVxdWFsLCB0aHJlZS13aXRoLXNpZGViYXJzICovCgoudHdvLWVxdWFsIC5ub3JtYWwgewogICp3aWR0aDogNDkuOSU7Cn0KCi50d28tbGVmdC1zaWRlYmFyIC5ub3JtYWwsCi50d28tcmlnaHQtc2lkZWJhciAubm9ybWFsIHsKICAqd2lkdGg6IDY5LjklOwp9CgoudGhyZWUtZXF1YWwgLmNlbGwgewogICp3aWR0aDogMzMuMyU7Cn0KCi50aHJlZS13aXRoLXNpZGViYXJzIC5ub3JtYWwgewogICp3aWR0aDogNTkuOSU7Cn0KCi50d28tZXF1YWwgZGl2LmNlbGwgKyBkaXYuY2VsbCB7CiAgKmZsb2F0OiByaWdodDsKfQoKLnRocmVlLWVxdWFsLCAudGhyZWUtd2l0aC1zaWRlYmFycyB7CiAgZGl2LmNlbGwgKyBkaXYuY2VsbCArIGRpdi5jZWxsIHsKICAgICpmbG9hdDogcmlnaHQ7CiAgfQp9CgovKiBDT05GREVWLTEzODA0OiBUZW1wb3Jhcnkgd29ya2Fyb3VuZCwgcmVtb3ZlIG9uY2UgZml4ZWQgaW4gdGhlIHBsdWdpbiAoV0RBWS0xNjQxKS4gKi8KI213LWNvbnRhaW5lciBkaXYubXctbm8tbm90aWZpY2F0aW9ucyBkaXYuc3ViaGVhZGluZyBwIHsKICBsaW5lLWhlaWdodDogMjRweDsKICBtYXJnaW4tdG9wOiA4cHg7CiAgbWFyZ2luLWJvdHRvbTogOHB4Owp9CgouY29uZmx1ZW5jZVRhYmxlIHsKICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7Cn0KCi5jb25mbHVlbmNlVGgsCi5jb25mbHVlbmNlVGQgewogICAgYm9yZGVyOiAxcHggc29saWQgI2RkZDsKICAgIHBhZGRpbmc6IDdweCAxMHB4OyAvKiBDT05GREVWLTEzNjE4OiBsaW5lLWhlaWdodCB3aWxsIGFkZCB1cCAzIHBpeGVscywgc28gd2UgaGF2ZSBhIDEwcHggdG9wIHBhZGRpbmcgZm9yIHRleHQuIEltYWdlcyB3aWxsIHJlbWFpbiB3aXRoIDdweCB0b3AgbWFyZ2luIHRob3VnaCAoc2VlIHRocmVhZCBpbiBTdGFzaCkgKi8KICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7CiAgICB0ZXh0LWFsaWduOiBsZWZ0OwogICAgbWluLXdpZHRoOiA4cHg7IC8qIENPTkYtMzk5NDM6IHNldCB0YWJsZSBjZWxsIG1pbi13aWR0aCB0byB3aGljaCBjdXJzb3IgY2FuIGJlIGZvY3VzZWQgKi8KfQoKLyogTGlzdHMgaW4gdGFibGVzICovCi5jb25mbHVlbmNlVGFibGUgb2wsCi5jb25mbHVlbmNlVGFibGUgdWwgewogICAgbWFyZ2luLWxlZnQ6IDA7CiAgICBwYWRkaW5nLWxlZnQ6IDIycHg7IC8qIENPTkZERVYtMTI1ODk6IGRlZmF1bHQgbGVmdCBwYWRkaW5nIGlzIGZhciB0b28gd2lkZSAqLwp9CgovKiBhbGwgdGFibGVzIHNob3VsZCBoYXZlIGEgdG9wIG1hcmdpbiBvZiAxMHB4ICovCi5jb25mbHVlbmNlVGFibGUsIC50YWJsZS13cmFwIHsKICAgIG1hcmdpbjogMTBweCAwIDAgMDsKICAgIG92ZXJmbG93LXg6IGF1dG87Cn0KCi8qIGFuIGV4Y2VwdGlvbiB0byBhYm92ZSBydWxlIGZvciB0YWJsZXMgdGhhdCBhcmUgZmlyc3QgY2hpbGQgKi8KLmNvbmZsdWVuY2VUYWJsZTpmaXJzdC1jaGlsZCwgLnRhYmxlLXdyYXA6Zmlyc3QtY2hpbGQgewogICAgbWFyZ2luLXRvcDogMDsKfQoKLyogQmFja2dyb3VuZCBjb2xvcnMgKi8KdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRoLmNvbmZsdWVuY2VUaCwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRoLmNvbmZsdWVuY2VUaCA+IHAsCnRhYmxlLmNvbmZsdWVuY2VUYWJsZSB0aC5jb25mbHVlbmNlVGguaGlnaGxpZ2h0LWdyZXksCnRhYmxlLmNvbmZsdWVuY2VUYWJsZSB0aC5jb25mbHVlbmNlVGguaGlnaGxpZ2h0LWdyZXkgPiBwLAp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGQuY29uZmx1ZW5jZVRkLmhpZ2hsaWdodC1ncmV5LAp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGQuY29uZmx1ZW5jZVRkLmhpZ2hsaWdodC1ncmV5ID4gcCB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwOwp9Cgp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoLmhpZ2hsaWdodC1ibHVlLAp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoLmhpZ2hsaWdodC1ibHVlID4gcCwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZC5oaWdobGlnaHQtYmx1ZSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZC5oaWdobGlnaHQtYmx1ZSA+IHAgewogICAgYmFja2dyb3VuZC1jb2xvcjogI2UwZjBmZjsKfQoKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRoLmNvbmZsdWVuY2VUaC5oaWdobGlnaHQtZ3JlZW4sCnRhYmxlLmNvbmZsdWVuY2VUYWJsZSB0aC5jb25mbHVlbmNlVGguaGlnaGxpZ2h0LWdyZWVuID4gcCwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZC5oaWdobGlnaHQtZ3JlZW4sCnRhYmxlLmNvbmZsdWVuY2VUYWJsZSB0ZC5jb25mbHVlbmNlVGQuaGlnaGxpZ2h0LWdyZWVuID4gcCB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRmYWRlOwp9Cgp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoLmhpZ2hsaWdodC1yZWQsCnRhYmxlLmNvbmZsdWVuY2VUYWJsZSB0aC5jb25mbHVlbmNlVGguaGlnaGxpZ2h0LXJlZCA+IHAsCnRhYmxlLmNvbmZsdWVuY2VUYWJsZSB0ZC5jb25mbHVlbmNlVGQuaGlnaGxpZ2h0LXJlZCwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZC5oaWdobGlnaHQtcmVkID4gcCB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZlN2U3Owp9Cgp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoLmhpZ2hsaWdodC15ZWxsb3csCnRhYmxlLmNvbmZsdWVuY2VUYWJsZSB0aC5jb25mbHVlbmNlVGguaGlnaGxpZ2h0LXllbGxvdyA+IHAsCnRhYmxlLmNvbmZsdWVuY2VUYWJsZSB0ZC5jb25mbHVlbmNlVGQuaGlnaGxpZ2h0LXllbGxvdywKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZC5oaWdobGlnaHQteWVsbG93ID4gcCB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmRkOwp9CgovKiBBREczIGNvbG9ycyAqLwp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCMwOTFlNDIiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjMDkxZTQyIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzA5MUU0MjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCMxNzJiNGQiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjMTcyYjRkIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzE3MkI0RDsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCMyNTM4NTgiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjMjUzODU4Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzI1Mzg1ODsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCMzNDQ1NjMiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjMzQ0NTYzIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzM0NDU2MzsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCM0MjUyNmUiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjNDI1MjZlIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzQyNTI2RTsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCM1MDVmNzkiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjNTA1Zjc5Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzUwNUY3OTsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCM1ZTZjODQiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjNWU2Yzg0Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzVFNkM4NDsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCM2Yjc3OGMiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjNmI3NzhjIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzZCNzc4QzsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCM3YTg2OWEiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjN2E4NjlhIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzdBODY5QTsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCM4OTkzYTQiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjODk5M2E0Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzg5OTNBNDsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCM5N2EwYWYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjOTdhMGFmIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzk3QTBBRjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNhNWFkYmEiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjYTVhZGJhIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0E1QURCQTsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNiM2JhYzUiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjYjNiYWM1Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0IzQkFDNTsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNjMWM3ZDAiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjYzFjN2QwIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0MxQzdEMDsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNkZmUxZTYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZGZlMWU2Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0RGRTFFNjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNlYmVjZjAiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZWJlY2YwIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0VCRUNGMDsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNmNGY1ZjciXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZjRmNWY3Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0Y0RjVGNzsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNmYWZiZmMiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZmFmYmZjIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZBRkJGQzsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNmZmZmZmYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZmZmZmZmIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNiZjI2MDAiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjYmYyNjAwIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0JGMjYwMDsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNkZTM1MGIiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZGUzNTBiIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0RFMzUwQjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNmZjU2MzAiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZmY1NjMwIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGNTYzMDsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNmZjc0NTIiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZmY3NDUyIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGNzQ1MjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNmZjhmNzMiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZmY4ZjczIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGOEY3MzsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNmZmJkYWQiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZmZiZGFkIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGQkRBRDsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNmZmViZTYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZmZlYmU2Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRUJFNjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNmZjhiMDAiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZmY4YjAwIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGOEIwMDsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNmZjk5MWYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZmY5OTFmIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGOTkxRjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNmZmFiMDAiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZmZhYjAwIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGQUIwMDsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNmZmM0MDAiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZmZjNDAwIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGQzQwMDsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNmZmUzODAiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZmZlMzgwIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRTM4MDsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNmZmYwYjMiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZmZmMGIzIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRjBCMzsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNmZmZhZTYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZmZmYWU2Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkFFNjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCMwMDY2NDQiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjMDA2NjQ0Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNjY0NDsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCMwMDg3NWEiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjMDA4NzVhIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwODc1QTsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCMzNmIzN2UiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjMzZiMzdlIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzM2QjM3RTsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCM1N2Q5YTMiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjNTdkOWEzIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzU3RDlBMzsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCM3OWYyYzAiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjNzlmMmMwIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzc5RjJDMDsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNhYmY1ZDEiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjYWJmNWQxIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0FCRjVEMTsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNlM2ZjZWYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZTNmY2VmIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0UzRkNFRjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCMwMDhkYTYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjMDA4ZGE2Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwOERBNjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCMwMGEzYmYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjMDBhM2JmIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwQTNCRjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCMwMGI4ZDkiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjMDBiOGQ5Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwQjhEOTsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCMwMGM3ZTYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjMDBjN2U2Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwQzdFNjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCM3OWUyZjIiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjNzllMmYyIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzc5RTJGMjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNiM2Y1ZmYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjYjNmNWZmIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0IzRjVGRjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNlNmZjZmYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZTZmY2ZmIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0U2RkNGRjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCMwNzQ3YTYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjMDc0N2E2Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzA3NDdBNjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCMwMDUyY2MiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjMDA1MmNjIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNTJDQzsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCMwMDY1ZmYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjMDA2NWZmIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNjVGRjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCMyNjg0ZmYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjMjY4NGZmIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzI2ODRGRjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCM0YzlhZmYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjNGM5YWZmIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzRDOUFGRjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNiM2Q0ZmYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjYjNkNGZmIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0IzRDRGRjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNkZWViZmYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZGVlYmZmIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0RFRUJGRjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCM0MDMyOTQiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjNDAzMjk0Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzQwMzI5NDsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCM1MjQzYWEiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjNTI0M2FhIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzUyNDNBQTsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCM2NTU0YzAiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjNjU1NGMwIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzY1NTRDMDsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCM4Nzc3ZDkiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjODc3N2Q5Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzg3NzdEOTsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCM5OThkZDkiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjOTk4ZGQ5Il0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzk5OEREOTsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNjMGI2ZjIiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjYzBiNmYyIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0MwQjZGMjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCNlYWU2ZmYiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjZWFlNmZmIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogI0VBRTZGRjsKfQp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoW2RhdGEtaGlnaGxpZ2h0LWNvbG91cj0iXCMwMDAwMDAiXSwKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZFtkYXRhLWhpZ2hsaWdodC1jb2xvdXI9IlwjMDAwMDAwIl0gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDAwMDsKfQovKiBBREczIGNvbG9ycyBlbmQgKi8KCnRhYmxlLmNvbmZsdWVuY2VUYWJsZSB0aC5jb25mbHVlbmNlVGgsCnRhYmxlLmNvbmZsdWVuY2VUYWJsZSB0aC5jb25mbHVlbmNlVGggPiBwIHsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwp9Cgp0YWJsZS5jb25mbHVlbmNlVGFibGUgdGguY29uZmx1ZW5jZVRoLm5vaGlnaGxpZ2h0LCAvKiBkZXByZWNhdGVkICovCnRhYmxlLmNvbmZsdWVuY2VUYWJsZSB0aC5jb25mbHVlbmNlVGgubm9oaWdobGlnaHQgPiBwIHsKICAgIC8qIGRlcHJlY2F0ZWQgKi8KICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKfQoKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLmNvbmZsdWVuY2VUZCBpbWcsCnRhYmxlLmNvbmZsdWVuY2VUYWJsZSB0ZC5jb25mbHVlbmNlVGQgLmNvbmZsdWVuY2UtZW1iZWRkZWQtZmlsZS13cmFwcGVyIGltZywKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRoLmNvbmZsdWVuY2VUaCAuY29uZmx1ZW5jZS1lbWJlZGRlZC1maWxlLXdyYXBwZXIgaW1nIHsKICAgIG1heC13aWR0aDogbm9uZTsKfQoKdGFibGUuY29uZmx1ZW5jZVRhYmxlIHRkLm51bWJlcmluZ0NvbHVtbiB7CiAgICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7CiAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lOwogICAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lOwogICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTsKICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTsKICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgY3Vyc29yOiBkZWZhdWx0Owp9CgovKgogICAgU3R5bGVzIGZvciBtYWNyb3MgYnVuZGxlZCBpbiBSZW5kZXJlci4KKi8KLnNlYXJjaE1hY3JvIHsKICAgIGZvbnQtc2l6ZTogMTBwdDsKICAgIG1hcmdpbjogMTBweCAwOwp9Cgouc2VhcmNoTWFjcm8gLnJlc3VsdCB7CiAgICBtYXJnaW4tdG9wOiAzcHg7CiAgICBwYWRkaW5nOiAwIDVweCA1cHggNXB4OwogICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZGQ7Cn0KCi5zZWFyY2hNYWNybyAucmVzdWx0U3VtbWFyeSB7CiAgICBtYXJnaW4tYm90dG9tOiA3cHg7Cn0KCi5yc3NNYWNybyB7CiAgICBmb250LXNpemU6IDEwcHQ7Cn0KCi5yc3NNYWNybyB0YWJsZSB7CiAgICBtYXJnaW46IDEwcHggMDsKICAgIHdpZHRoOiAxMDAlOwogICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKfQoKLnJzc01hY3JvIHRhYmxlIHRoLAoucnNzTWFjcm8gdGFibGUgdGQgewogICAgYm9yZGVyOiAxcHggc29saWQgI2NjYzsKICAgIHBhZGRpbmc6IDRweDsKfQoKLnJzc01hY3JvIHRhYmxlIHRoIHsKICAgIGJhY2tncm91bmQ6ICNmMGYwZjA7Cn0KCi8qIENvZGUgc3R5bGVzICovCi5jb2RlLCAucHJlZm9ybWF0dGVkIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7CiAgICBvdmVyZmxvdzogYXV0bzsKfQoKLmNvZGUgcHJlLCAucHJlZm9ybWF0dGVkIHByZSB7IC8qIG5lZWRzICdwcmUnIHRvIG92ZXJyaWRlIFRpbnlNQ0Ugc3R5bGUgKi8KICAgIGZvbnQtZmFtaWx5OiJDb3VyaWVyIE5ldyIsIENvdXJpZXIsIG1vbm9zcGFjZTsKICAgIGxpbmUtaGVpZ2h0OiAxLjM7Cn0KCi8qIFRoZSBjb2RlIG1hY3JvIGNsYXNzZXMgYXJlIG92ZXJyaWRkZW4gYnkgdGhlIGZpeGVkIHdpZHRoIHRoZW1lIHNvIGhhdmUgYmVlbgogICBtYWRlIG1vcmUgc3BlY2lmaWMuICovCgoud2lraS1jb250ZW50IC5jb2RlLWtleXdvcmQgewogIGNvbG9yOiAjMDAwMDkxOwogIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7Cn0KCi53aWtpLWNvbnRlbnQgLmNvZGUtb2JqZWN0IHsKICBjb2xvcjogIzkxMDA5MTsKICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0Owp9Cgoud2lraS1jb250ZW50IC5jb2RlLXF1b3RlIHsKICBjb2xvcjogIzAwOTEwMDsKICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0Owp9Cgoud2lraS1jb250ZW50IC5jb2RlLWNvbW1lbnQgewogIGNvbG9yOiAjODA4MDgwOwogIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7Cn0KCi53aWtpLWNvbnRlbnQgLmNvZGUteG1sIC5jb2RlLWtleXdvcmQgewogIGNvbG9yOiBpbmhlcml0OwogIGZvbnQtd2VpZ2h0OiBib2xkOwp9Cgoud2lraS1jb250ZW50IC5jb2RlLXRhZyB7CiAgY29sb3I6ICMwMDAwOTE7CiAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDsKfQoKLyogUmVjZW50bHkgVXBkYXRlZCBTdHlsZXMgKi8KLnJlY2VudGx5VXBkYXRlZEl0ZW0gewoJYm9yZGVyLWJvdHRvbTogI2YwZjBmMCAxcHggc29saWQ7Cglib3JkZXItdG9wOiAjZjBmMGYwIDFweCBzb2xpZDsKCW1hcmdpbjogMTBweCAwIDAgMDsKCXBhZGRpbmc6IDA7Cglib3JkZXItc3BhY2luZzogMDsKCXdpZHRoOiAxMDAlOwogICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKfQoKLnJlY2VudGx5VXBkYXRlZEl0ZW0gdGQgewogICAgcGFkZGluZzogMTBweDsKICAgIGJvcmRlci1ib3R0b206ICNmMGYwZjAgMXB4IHNvbGlkOwogICAgdmVydGljYWwtYWxpZ246IHRvcDsKfQoKLnJlY2VudGx5VXBkYXRlZEl0ZW0gLmF1dGhvckFuZERhdGUgewoJYmFja2dyb3VuZC1jb2xvcjogI2YwZjBmMDsKCXdpZHRoOiAyNSU7Cn0KCi5yZWNlbnRseVVwZGF0ZWRJdGVtIC5kYXRlIHsKICAgIG1hcmdpbi10b3A6IDRweDsKICAgIGZvbnQtc2l6ZTogOTAlOwogICAgY29sb3I6ICM2NjY7Cn0KCi5yZWNlbnRseVVwZGF0ZWRJdGVtIC5wcm9maWxlUGljIHsKICAgIGZsb2F0OiByaWdodDsKICAgIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7CiAgICBtYXJnaW46IDAgMnB4Owp9CgoucmVjZW50bHlVcGRhdGVkSXRlbSAudHdpeGllIHsKICAgIHBhZGRpbmc6IDEwcHggMCAwIDRweDsKfQoKLnJlY2VudGx5VXBkYXRlZEl0ZW0gdGQuaWNvbiB7CiAgICBwYWRkaW5nOiA4cHggMCAwIDFweDsKfQoKLnJlY2VudGx5VXBkYXRlZEl0ZW0gLmRldGFpbHMgewogICAgcGFkZGluZy1sZWZ0OiA3cHg7Cn0KCi5yZWNlbnRseVVwZGF0ZWRJdGVtIC5zdW1tYXJ5LCAucmVjZW50bHlVcGRhdGVkSXRlbSAudGh1bWJuYWlsIHsKICAgIG1hcmdpbi10b3A6IDNweDsKICAgIGNvbG9yOiAjNjY2Owp9CgoubW9yZVJlY2VudGx5VXBkYXRlZEl0ZW1zIHsKICAgIHRleHQtYWxpZ246IHJpZ2h0OwogICAgbWFyZ2luLXRvcDogMTBweDsKICAgIGZvbnQtc2l6ZTogMTBwdDsKfQoKCi8qUERMIGljb25zLmNzcyovCi5pY29u
");
			File.WriteAllBytes(siteCssFile, siteCssContents);

			var iconsDirectory = Path.Combine(spaceDirectory, "images", "icons");

			if (!Directory.Exists(iconsDirectory))
				Directory.CreateDirectory(iconsDirectory);

			var bulletBlueGifFile = Path.Combine(iconsDirectory, "bullet_blue.gif");
			var bulletBlueGifContents = Convert.FromBase64String(@"R0lGODlhCAAIAJEAAAAzZp272v4BAgAAACH5BAQUAP8ALAAAAAAIAAgAAAINhH+ha8vgVIvT1YdOAQA7");
			File.WriteAllBytes(bulletBlueGifFile, bulletBlueGifContents);

			var attachmentsDirectory = Path.Combine(spaceDirectory, "attachments");

			if (!Directory.Exists(attachmentsDirectory))
				Directory.CreateDirectory(attachmentsDirectory);

			foreach (var eachPage in pages)
			{
				var eachPageContent = GeneratePageHtml(eachPage, sourceDomain, spaceKey);
				File.WriteAllText(Path.Combine(spaceDirectory, $"{eachPage.Id}.html"), eachPageContent, new UTF8Encoding(false));

				if (eachPage.Attachments != null && eachPage.Attachments.Count > 0)
				{
					var eachPageAttachmentDirectory = Path.Combine(attachmentsDirectory, eachPage.Id);
					if (!Directory.Exists(eachPageAttachmentDirectory))
						Directory.CreateDirectory(eachPageAttachmentDirectory);

					foreach (var eachAttachment in eachPage.Attachments)
					{
						if (eachAttachment.RelatedEntry == null)
							continue;

						// filter attachment file to reduce size
						if (!IsAllowedExtension(eachAttachment.Title))
							continue;

						// skip embedded attachment to reduce size
						if (eachAttachment.HasEmbedded)
							continue;

						var extension = Path.GetExtension(eachAttachment.Title);
						var stream = eachAttachment.RelatedEntry.Open();
						var targetPath = Path.Combine(eachPageAttachmentDirectory, $"{eachAttachment.Id}{extension}");
						using (var fileStream = File.OpenWrite(targetPath))
						{
							stream.CopyTo(fileStream);
						}
					}
				}
			}

			var pageViewUrlType1 = new Regex(@"pageId\=(?<PageId>[^&#?]+)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
			var pageViewUrlType2 = new Regex(@"/pages/(?<PageId>[^/&#?]+)$", RegexOptions.Compiled | RegexOptions.IgnoreCase);

			foreach (var eachOutputHtmlFile in Directory.GetFiles(spaceDirectory, "*.html", SearchOption.TopDirectoryOnly))
			{
				var doc = new HtmlDocument();
				doc.LoadHtml(File.ReadAllText(eachOutputHtmlFile, new UTF8Encoding(false)));

				var allAnchors = doc.DocumentNode.SelectNodes("//a[not(@data-skip='skip')]");

				if (allAnchors != null && allAnchors.Count > 0)
				{
					foreach (var eachAnchorTag in allAnchors)
					{
						var url = eachAnchorTag.Attributes["href"]?.Value;

						if (Uri.TryCreate(url, UriKind.RelativeOrAbsolute, out Uri parsedUri) &&
							parsedUri.IsAbsoluteUri)
						{
							var m = pageViewUrlType1.Match(parsedUri.PathAndQuery);

							if (m.Success)
								eachAnchorTag.SetAttributeValue("href", $"{m.Groups["PageId"].Value}.html");

							m = pageViewUrlType2.Match(parsedUri.PathAndQuery);

							if (m.Success)
								eachAnchorTag.SetAttributeValue("href", $"{m.Groups["PageId"].Value}.html");
						}
					}
				}

				var buffer = new StringBuilder();
				using (var writer = new StringWriter(buffer))
				{
					doc.Save(writer);
					writer.Flush();
				}

				File.WriteAllText(eachOutputHtmlFile, buffer.ToString(), new UTF8Encoding(false));
			}

			ZipFile.CreateFromDirectory(workingPath, outputPath, CompressionLevel.Optimal, false);
			//Directory.Move(workingPath, Path.Combine(Path.GetDirectoryName(outputPath), Path.GetFileName(workingPath)));

			try { Directory.Delete(workingPath, true); }
			catch { }
		}

		public static string GenerateTocHtml(ItemCollection<PageNode> pages, string spaceKey)
		{
			var rootPages = pages.Where(x => x.ParentPage == null);
			var template = $@"<!DOCTYPE html>
<html>
  <head>
    <title>DEVSISTERS (Devsisters)</title>
    <link rel=""stylesheet"" href=""styles/site.css"" type=""text/css"" />
    <META http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">
  </head>
  <body class=""theme-default aui-theme-default"">
    <div id=""page"">
      <div id=""main"" class=""aui-page-panel"">
        <div id=""main-header"">
          <h1 id=""title-heading"" class=""pagetitle"">
            <span id=""title-text"">Space Details:</span>
          </h1>
        </div>
        <div id=""content"">
          <div id=""main-content"" class=""pageSection"">
            <table class=""confluenceTable"">
              <tr>
                <th class=""confluenceTh"">Key</th>
                <td class=""confluenceTd"">{spaceKey}</td>
              </tr>
              <tr>
                <th class=""confluenceTh"">Name</th>
                <td class=""confluenceTd"">Contents Owner</td>
              </tr>
              <tr>
                <th class=""confluenceTh"">Description</th>
                <td class=""confluenceTd""></td>
              </tr>
              <tr>
                <th class=""confluenceTh"">Created by</th>
                <td class=""confluenceTd"">{DateTime.UtcNow:yyyy-MM-dd-HH-mm-ss}</td>
              </tr>
            </table>
          </div>
          <br/>
          <br/>
          <div class=""pageSection"">
            <div class=""pageSectionHeader"">
              <h2 class=""pageSectionTitle"">Available Pages:</h2>
            </div>
          </div>
        </div>
      </div>
      <div id=""footer"" role=""contentinfo"">
        <section class=""footer-body"">
          <p>Document generated by Confluence on {DateTime.UtcNow:yyyy-MM-dd HH\:mm}</p>
          <div id=""footer-logo""><a href=""http://www.atlassian.com/"">Atlassian</a></div>
        </section>
      </div>
    </div>
  </body>
</html>";

			var doc = new HtmlDocument()
			{
				OptionDefaultUseOriginalName = true,
			};
			doc.LoadHtml(template);

			var pageSectionElem = doc.DocumentNode.SelectSingleNode("//h2[starts-with(text(), 'Available Pages')]/../..");
			var ulElem = doc.CreateElement("ul");

			foreach (var eachPageNode in rootPages)
				RenderTocHtml(eachPageNode, ulElem);

			pageSectionElem.AppendChild(ulElem);

			var buffer = new StringBuilder();
			using (var writer = new StringWriter(buffer))
			{
				doc.Save(writer);
				writer.Flush();
				return buffer.ToString();
			}
		}

		public static void RenderTocHtml(PageNode pageNode, HtmlNode parentNode)
		{
			// li
			var liElem = parentNode.OwnerDocument.CreateElement("li");

			// a
			var aElem = parentNode.OwnerDocument.CreateElement("a");
			aElem.SetAttributeValue("href", $"{pageNode.Id}.html");
			aElem.InnerHtml = pageNode.Title;
			liElem.AppendChild(aElem);

			if (pageNode.ChildPages != null && pageNode.ChildPages.Count > 0)
			{
				// ul
				var ulElem = parentNode.OwnerDocument.CreateElement("ul");
				foreach (var eachChildPageNode in pageNode.ChildPages)
					RenderTocHtml(eachChildPageNode, ulElem);
				liElem.AppendChild(ulElem);
			}

			parentNode.AppendChild(liElem);
		}

		public static string GeneratePageHtml(PageNode page, string sourceDomain, string spaceKey)
		{
			var template = $@"<!DOCTYPE html>
<html>
  <head>
    <title>{spaceKey} : {page.Title}</title>
    <link rel=""stylesheet"" href=""styles/site.css"" type=""text/css"" />
    <META http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">
  </head>
  <body class=""theme-default aui-theme-default"">
    <div id=""page"">
      <div id=""main"" class=""aui-page-panel"">
        <div id=""main-header"">
          <div id=""breadcrumb-section"">
            <ol id=""breadcrumbs"">
            </ol>
          </div>
          <h1 id=""title-heading"" class=""pagetitle"">
            <span id=""title-text"">
            {spaceKey} : {page.Title}
            </span>
          </h1>
        </div>
        <div id=""content"" class=""view"">
          <div class=""page-metadata"">
            Created by converter on {DateTime.UtcNow:yyyy-MM-dd}
          </div>
          <div id=""main-content"" class=""wiki-content group"">
          </div>
        </div>
      </div>
      <div id=""footer"" role=""contentinfo"">
        <section class=""footer-body"">
          <p>Document generated by Confluence on {DateTime.UtcNow:yyyy-MM-dd HH\:mm}</p>
          <div id=""footer-logo""><a href=""http://www.atlassian.com/"">Atlassian</a></div>
        </section>
      </div>
    </div>
  </body>
</html>";

			var doc = new HtmlDocument()
			{
				OptionDefaultUseOriginalName = true,
			};
			doc.LoadHtml(template);

			var breadcrumbsElem = doc.GetElementbyId("breadcrumbs");
			var parentNode = page.ParentPage;
			var liNodeList = new List<HtmlNode>();

			do
			{
				if (parentNode == null)
					break;

				var liNode = doc.CreateElement("li");

				var spanNode = doc.CreateElement("span");

				var anchorNode = doc.CreateElement("a");
				anchorNode.SetAttributeValue("href", $"{parentNode.Id}.html");
				anchorNode.InnerHtml = parentNode.Title;
				spanNode.AppendChild(anchorNode);

				liNode.AppendChild(spanNode);

				liNodeList.Insert(0, liNode);
			}
			while ((parentNode = parentNode?.ParentPage) != null);

			// Add index.html breadcrumb
			var firstLiNode = doc.CreateElement("li");
			firstLiNode.AddClass("first");

			var firstSpanNode = doc.CreateElement("span");

			var firstAnchorNode = doc.CreateElement("a");
			firstAnchorNode.SetAttributeValue("href", $"index.html");
			firstAnchorNode.InnerHtml = spaceKey;
			firstSpanNode.AppendChild(firstAnchorNode);

			firstLiNode.AppendChild(firstSpanNode);
			liNodeList.Insert(0, firstLiNode);

			foreach (var eachLiNode in liNodeList)
				breadcrumbsElem.AppendChild(eachLiNode);

			var mainContentElem = doc.GetElementbyId("main-content");
			mainContentElem.InnerHtml = string.Concat(
				new string[] { $"<p>이 페이지는 <a data-skip=\"skip\" target=\"_blank\" rel=\"nofollow\" href=\"https://{sourceDomain}/wiki/spaces/{spaceKey}/pages/{page.Id}\">https://{sourceDomain}/wiki/spaces/{spaceKey}/pages/{page.Id}</a>에서 가져왔습니다.</p><hr />", }.Concat(
				page.BodyContents.Select(x => x.Body)));

			if (page.Attachments != null && page.Attachments.Count > 0)
			{
				var attachmentsListElem = doc.GetElementbyId("attachmentsList");

				var attachmentSectionElem = doc.CreateElement("div");
				{
					attachmentSectionElem.AddClass("pageSection");
					attachmentSectionElem.AddClass("group");

					var attachmentSectionHeaderElem = doc.CreateElement("div");
					{
						attachmentSectionHeaderElem.AddClass("pageSectionHeader");

						var h2Elem = doc.CreateElement("h2");
						h2Elem.Id = "attachments";
						h2Elem.AddClass("pageSectionTitle");
						h2Elem.InnerHtml = "Attachments:";
						attachmentSectionHeaderElem.AppendChild(h2Elem);
					}

					attachmentSectionElem.AppendChild(attachmentSectionHeaderElem);

					attachmentsListElem = doc.CreateElement("div");
					{
						attachmentsListElem.AddClass("greybox");
						attachmentsListElem.SetAttributeValue("align", "left");
					}

					attachmentSectionElem.AppendChild(attachmentsListElem);
				}

				mainContentElem.ParentNode.InsertAfter(attachmentSectionElem, mainContentElem);

				foreach (var eachAttachment in page.Attachments)
				{
					if (eachAttachment.HasEmbedded)
						continue;

					var bulletBlueElem = doc.CreateElement("img");
					bulletBlueElem.SetAttributeValue("src", "images/icon/bullet_blue.gif");
					bulletBlueElem.SetAttributeValue("width", "8");
					bulletBlueElem.SetAttributeValue("height", "8");
					bulletBlueElem.SetAttributeValue("alt", string.Empty);
					attachmentsListElem.AppendChild(bulletBlueElem);

					var anchorElem = doc.CreateElement("a");
					anchorElem.SetAttributeValue("href", $"attachments/{page.Id}/{eachAttachment.Id}{Path.GetExtension(eachAttachment.Title)}");
					anchorElem.InnerHtml = $"{eachAttachment.Title}";
					attachmentsListElem.AppendChild(anchorElem);

					var contentTypeText = doc.CreateTextNode($" ({GetContentType(Path.GetExtension(eachAttachment.Title))})");
					attachmentsListElem.AppendChild(contentTypeText);

					var brElem = doc.CreateElement("br");
					attachmentsListElem.AppendChild(brElem);
				}
			}

			var buffer = new StringBuilder();
			using (var writer = new StringWriter(buffer))
			{
				doc.Save(writer);
				writer.Flush();
				return buffer.ToString();
			}
		}

		public static string GetContentType(string extension)
		{
			// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
			switch (extension?.Trim()?.ToLowerInvariant())
			{
				case ".aac": return "audio/aac";
				case ".abw": return "application/x-abiword";
				case ".arc": return "application/x-freearc";
				case ".avif": return "image/avif";
				case ".avi": return "video/x-msvideo";
				case ".azw": return "application/vnd.amazon.ebook";
				case ".bmp": return "image/bmp";
				case ".bz": return "application/x-bzip";
				case ".bz2": return "application/x-bzip2";
				case ".cda": return "application/x-cdf";
				case ".csh": return "application/x-csh";
				case ".css": return "text/css";
				case ".csv": return "text/csv";
				case ".doc": return "application/msword";
				case ".docx": return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
				case ".eot": return "application/vnd.ms-fontobject";
				case ".epub": return "application/epub+zip";
				case ".gz": return "application/gzip";
				case ".gif": return "image/gif";
				case ".htm":
				case ".html": return "text/html";
				case ".ico": return "image/vnd.microsoft.icon";
				case ".ics": return "text/calendar";
				case ".jar": return "application/java-archive";
				case ".jpeg":
				case ".jpg": return "image/jpeg";
				case ".js": return "text/javascript";
				case ".json": return "application/json";
				case ".jsonld": return "application/ld+json";
				case ".mid":
				case ".midi": return "audio/midi audio/x-midi";
				case ".mjs": return "text/javascript";
				case ".mp3": return "audio/mpeg";
				case ".mp4": return "video/mp4";
				case ".mpeg": return "video/mpeg";
				case ".mpkg": return "application/vnd.apple.installer+xml";
				case ".odp": return "application/vnd.oasis.opendocument.presentation";
				case ".ods": return "application/vnd.oasis.opendocument.spreadsheet";
				case ".odt": return "application/vnd.oasis.opendocument.text";
				case ".oga": return "audio/ogg";
				case ".ogv": return "video/ogg";
				case ".ogx": return "application/ogg";
				case ".opus": return "audio/opus";
				case ".otf": return "font/otf";
				case ".png": return "image/png";
				case ".pdf": return "application/pdf";
				case ".php": return "application/x-httpd-php";
				case ".ppt": return "application/vnd.ms-powerpoint";
				case ".pptx": return "application/vnd.openxmlformats-officedocument.presentationml.presentation";
				case ".rar": return "application/vnd.rar";
				case ".rtf": return "application/rtf";
				case ".sh": return "application/x-sh";
				case ".svg": return "image/svg+xml";
				case ".swf": return "application/x-shockwave-flash";
				case ".tar": return "application/x-tar";
				case ".tif": case ".tiff": return "image/tiff";
				case ".ts": return "video/mp2t";
				case ".ttf": return "font/ttf";
				case ".txt": return "text/plain";
				case ".vsd": return "application/vnd.visio";
				case ".wav": return "audio/wav";
				case ".weba": return "audio/webm";
				case ".webm": return "video/webm";
				case ".webp": return "image/webp";
				case ".woff": return "font/woff";
				case ".woff2": return "font/woff2";
				case ".xhtml": return "application/xhtml+xml";
				case ".xls": return "application/vnd.ms-excel";
				case ".xlsx": return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
				case ".xml": return "application/xml";
				case ".xul": return "application/vnd.mozilla.xul+xml";
				case ".zip": return "application/zip";
				case ".3gp": return "video/3gpp";
				case ".3g2": return "video/3gpp2";
				case ".7z": return "application/x-7z-compressed";
				default: return "application/octet-stream";
			}
		}
	}
}
